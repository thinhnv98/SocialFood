// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRestaurantRanks(t *testing.T) {
	t.Parallel()

	query := RestaurantRanks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRestaurantRanksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRestaurantRanksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RestaurantRanks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRestaurantRanksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RestaurantRankSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRestaurantRanksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RestaurantRankExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RestaurantRank exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RestaurantRankExists to return true, but got false.")
	}
}

func testRestaurantRanksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	restaurantRankFound, err := FindRestaurantRank(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if restaurantRankFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRestaurantRanksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RestaurantRanks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRestaurantRanksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RestaurantRanks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRestaurantRanksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	restaurantRankOne := &RestaurantRank{}
	restaurantRankTwo := &RestaurantRank{}
	if err = randomize.Struct(seed, restaurantRankOne, restaurantRankDBTypes, false, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}
	if err = randomize.Struct(seed, restaurantRankTwo, restaurantRankDBTypes, false, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = restaurantRankOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = restaurantRankTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RestaurantRanks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRestaurantRanksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	restaurantRankOne := &RestaurantRank{}
	restaurantRankTwo := &RestaurantRank{}
	if err = randomize.Struct(seed, restaurantRankOne, restaurantRankDBTypes, false, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}
	if err = randomize.Struct(seed, restaurantRankTwo, restaurantRankDBTypes, false, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = restaurantRankOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = restaurantRankTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func restaurantRankBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantRank) error {
	*o = RestaurantRank{}
	return nil
}

func restaurantRankAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantRank) error {
	*o = RestaurantRank{}
	return nil
}

func restaurantRankAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantRank) error {
	*o = RestaurantRank{}
	return nil
}

func restaurantRankBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantRank) error {
	*o = RestaurantRank{}
	return nil
}

func restaurantRankAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantRank) error {
	*o = RestaurantRank{}
	return nil
}

func restaurantRankBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantRank) error {
	*o = RestaurantRank{}
	return nil
}

func restaurantRankAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantRank) error {
	*o = RestaurantRank{}
	return nil
}

func restaurantRankBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantRank) error {
	*o = RestaurantRank{}
	return nil
}

func restaurantRankAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantRank) error {
	*o = RestaurantRank{}
	return nil
}

func testRestaurantRanksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RestaurantRank{}
	o := &RestaurantRank{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RestaurantRank object: %s", err)
	}

	AddRestaurantRankHook(boil.BeforeInsertHook, restaurantRankBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	restaurantRankBeforeInsertHooks = []RestaurantRankHook{}

	AddRestaurantRankHook(boil.AfterInsertHook, restaurantRankAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	restaurantRankAfterInsertHooks = []RestaurantRankHook{}

	AddRestaurantRankHook(boil.AfterSelectHook, restaurantRankAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	restaurantRankAfterSelectHooks = []RestaurantRankHook{}

	AddRestaurantRankHook(boil.BeforeUpdateHook, restaurantRankBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	restaurantRankBeforeUpdateHooks = []RestaurantRankHook{}

	AddRestaurantRankHook(boil.AfterUpdateHook, restaurantRankAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	restaurantRankAfterUpdateHooks = []RestaurantRankHook{}

	AddRestaurantRankHook(boil.BeforeDeleteHook, restaurantRankBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	restaurantRankBeforeDeleteHooks = []RestaurantRankHook{}

	AddRestaurantRankHook(boil.AfterDeleteHook, restaurantRankAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	restaurantRankAfterDeleteHooks = []RestaurantRankHook{}

	AddRestaurantRankHook(boil.BeforeUpsertHook, restaurantRankBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	restaurantRankBeforeUpsertHooks = []RestaurantRankHook{}

	AddRestaurantRankHook(boil.AfterUpsertHook, restaurantRankAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	restaurantRankAfterUpsertHooks = []RestaurantRankHook{}
}

func testRestaurantRanksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRestaurantRanksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(restaurantRankColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRestaurantRankToOneRestaurantUsingRestaurant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RestaurantRank
	var foreign Restaurant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, restaurantRankDBTypes, false, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, restaurantDBTypes, false, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RestaurantID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Restaurant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RestaurantRankSlice{&local}
	if err = local.L.LoadRestaurant(ctx, tx, false, (*[]*RestaurantRank)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Restaurant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Restaurant = nil
	if err = local.L.LoadRestaurant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Restaurant == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRestaurantRankToOneSetOpRestaurantUsingRestaurant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RestaurantRank
	var b, c Restaurant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantRankDBTypes, false, strmangle.SetComplement(restaurantRankPrimaryKeyColumns, restaurantRankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Restaurant{&b, &c} {
		err = a.SetRestaurant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Restaurant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RestaurantRanks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RestaurantID != x.ID {
			t.Error("foreign key was wrong value", a.RestaurantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RestaurantID))
		reflect.Indirect(reflect.ValueOf(&a.RestaurantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RestaurantID != x.ID {
			t.Error("foreign key was wrong value", a.RestaurantID, x.ID)
		}
	}
}

func testRestaurantRanksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRestaurantRanksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RestaurantRankSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRestaurantRanksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RestaurantRanks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	restaurantRankDBTypes = map[string]string{`ID`: `integer`, `RestaurantID`: `integer`, `Vote`: `double precision`, `TotalOfVote`: `integer`}
	_                     = bytes.MinRead
)

func testRestaurantRanksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(restaurantRankPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(restaurantRankAllColumns) == len(restaurantRankPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRestaurantRanksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(restaurantRankAllColumns) == len(restaurantRankPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantRank{}
	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, restaurantRankDBTypes, true, restaurantRankPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(restaurantRankAllColumns, restaurantRankPrimaryKeyColumns) {
		fields = restaurantRankAllColumns
	} else {
		fields = strmangle.SetComplement(
			restaurantRankAllColumns,
			restaurantRankPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RestaurantRankSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRestaurantRanksUpsert(t *testing.T) {
	t.Parallel()

	if len(restaurantRankAllColumns) == len(restaurantRankPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RestaurantRank{}
	if err = randomize.Struct(seed, &o, restaurantRankDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RestaurantRank: %s", err)
	}

	count, err := RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, restaurantRankDBTypes, false, restaurantRankPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RestaurantRank struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RestaurantRank: %s", err)
	}

	count, err = RestaurantRanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
