// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Destination is an object representing the database table.
type Destination struct {
	ID          int          `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Country     null.String  `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Description string       `boil:"description" json:"description" toml:"description" yaml:"description"`
	Imagename   null.String  `boil:"imagename" json:"imageName,omitempty" toml:"imagename" yaml:"imagename,omitempty"`
	Imagedata   null.String  `boil:"imagedata" json:"imageData,omitempty" toml:"imagedata" yaml:"imagedata,omitempty"`
	Latitude    null.Float64 `boil:"latitude" json:"latitude,omitempty" toml:"latitude" yaml:"latitude,omitempty"`
	Longitude   null.Float64 `boil:"longitude" json:"longitude,omitempty" toml:"longitude" yaml:"longitude,omitempty"`

	R *destinationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L destinationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DestinationColumns = struct {
	ID          string
	Name        string
	Country     string
	Description string
	Imagename   string
	Imagedata   string
	Latitude    string
	Longitude   string
}{
	ID:          "id",
	Name:        "name",
	Country:     "country",
	Description: "description",
	Imagename:   "imagename",
	Imagedata:   "imagedata",
	Latitude:    "latitude",
	Longitude:   "longitude",
}

var DestinationTableColumns = struct {
	ID          string
	Name        string
	Country     string
	Description string
	Imagename   string
	Imagedata   string
	Latitude    string
	Longitude   string
}{
	ID:          "destination.id",
	Name:        "destination.name",
	Country:     "destination.country",
	Description: "destination.description",
	Imagename:   "destination.imagename",
	Imagedata:   "destination.imagedata",
	Latitude:    "destination.latitude",
	Longitude:   "destination.longitude",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DestinationWhere = struct {
	ID          whereHelperint
	Name        whereHelpernull_String
	Country     whereHelpernull_String
	Description whereHelperstring
	Imagename   whereHelpernull_String
	Imagedata   whereHelpernull_String
	Latitude    whereHelpernull_Float64
	Longitude   whereHelpernull_Float64
}{
	ID:          whereHelperint{field: "\"destination\".\"id\""},
	Name:        whereHelpernull_String{field: "\"destination\".\"name\""},
	Country:     whereHelpernull_String{field: "\"destination\".\"country\""},
	Description: whereHelperstring{field: "\"destination\".\"description\""},
	Imagename:   whereHelpernull_String{field: "\"destination\".\"imagename\""},
	Imagedata:   whereHelpernull_String{field: "\"destination\".\"imagedata\""},
	Latitude:    whereHelpernull_Float64{field: "\"destination\".\"latitude\""},
	Longitude:   whereHelpernull_Float64{field: "\"destination\".\"longitude\""},
}

// DestinationRels is where relationship names are stored.
var DestinationRels = struct {
	DestinationDetails string
	DestinationRanks   string
}{
	DestinationDetails: "DestinationDetails",
	DestinationRanks:   "DestinationRanks",
}

// destinationR is where relationships are stored.
type destinationR struct {
	DestinationDetails DestinationDetailSlice `boil:"DestinationDetails" json:"DestinationDetails" toml:"DestinationDetails" yaml:"DestinationDetails"`
	DestinationRanks   DestinationRankSlice   `boil:"DestinationRanks" json:"DestinationRanks" toml:"DestinationRanks" yaml:"DestinationRanks"`
}

// NewStruct creates a new relationship struct
func (*destinationR) NewStruct() *destinationR {
	return &destinationR{}
}

// destinationL is where Load methods for each relationship are stored.
type destinationL struct{}

var (
	destinationAllColumns            = []string{"id", "name", "country", "description", "imagename", "imagedata", "latitude", "longitude"}
	destinationColumnsWithoutDefault = []string{"name", "country", "imagename", "imagedata", "latitude", "longitude"}
	destinationColumnsWithDefault    = []string{"id", "description"}
	destinationPrimaryKeyColumns     = []string{"id"}
)

type (
	// DestinationSlice is an alias for a slice of pointers to Destination.
	// This should almost always be used instead of []Destination.
	DestinationSlice []*Destination
	// DestinationHook is the signature for custom Destination hook methods
	DestinationHook func(context.Context, boil.ContextExecutor, *Destination) error

	destinationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	destinationType                 = reflect.TypeOf(&Destination{})
	destinationMapping              = queries.MakeStructMapping(destinationType)
	destinationPrimaryKeyMapping, _ = queries.BindMapping(destinationType, destinationMapping, destinationPrimaryKeyColumns)
	destinationInsertCacheMut       sync.RWMutex
	destinationInsertCache          = make(map[string]insertCache)
	destinationUpdateCacheMut       sync.RWMutex
	destinationUpdateCache          = make(map[string]updateCache)
	destinationUpsertCacheMut       sync.RWMutex
	destinationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var destinationBeforeInsertHooks []DestinationHook
var destinationBeforeUpdateHooks []DestinationHook
var destinationBeforeDeleteHooks []DestinationHook
var destinationBeforeUpsertHooks []DestinationHook

var destinationAfterInsertHooks []DestinationHook
var destinationAfterSelectHooks []DestinationHook
var destinationAfterUpdateHooks []DestinationHook
var destinationAfterDeleteHooks []DestinationHook
var destinationAfterUpsertHooks []DestinationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Destination) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Destination) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Destination) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Destination) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Destination) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Destination) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Destination) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Destination) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Destination) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDestinationHook registers your hook function for all future operations.
func AddDestinationHook(hookPoint boil.HookPoint, destinationHook DestinationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		destinationBeforeInsertHooks = append(destinationBeforeInsertHooks, destinationHook)
	case boil.BeforeUpdateHook:
		destinationBeforeUpdateHooks = append(destinationBeforeUpdateHooks, destinationHook)
	case boil.BeforeDeleteHook:
		destinationBeforeDeleteHooks = append(destinationBeforeDeleteHooks, destinationHook)
	case boil.BeforeUpsertHook:
		destinationBeforeUpsertHooks = append(destinationBeforeUpsertHooks, destinationHook)
	case boil.AfterInsertHook:
		destinationAfterInsertHooks = append(destinationAfterInsertHooks, destinationHook)
	case boil.AfterSelectHook:
		destinationAfterSelectHooks = append(destinationAfterSelectHooks, destinationHook)
	case boil.AfterUpdateHook:
		destinationAfterUpdateHooks = append(destinationAfterUpdateHooks, destinationHook)
	case boil.AfterDeleteHook:
		destinationAfterDeleteHooks = append(destinationAfterDeleteHooks, destinationHook)
	case boil.AfterUpsertHook:
		destinationAfterUpsertHooks = append(destinationAfterUpsertHooks, destinationHook)
	}
}

// One returns a single destination record from the query.
func (q destinationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Destination, error) {
	o := &Destination{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for destination")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Destination records from the query.
func (q destinationQuery) All(ctx context.Context, exec boil.ContextExecutor) (DestinationSlice, error) {
	var o []*Destination

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Destination slice")
	}

	if len(destinationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Destination records in the query.
func (q destinationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count destination rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q destinationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if destination exists")
	}

	return count > 0, nil
}

// DestinationDetails retrieves all the destination_detail's DestinationDetails with an executor.
func (o *Destination) DestinationDetails(mods ...qm.QueryMod) destinationDetailQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"destination_detail\".\"destination_id\"=?", o.ID),
	)

	query := DestinationDetails(queryMods...)
	queries.SetFrom(query.Query, "\"destination_detail\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"destination_detail\".*"})
	}

	return query
}

// DestinationRanks retrieves all the destination_rank's DestinationRanks with an executor.
func (o *Destination) DestinationRanks(mods ...qm.QueryMod) destinationRankQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"destination_rank\".\"destination_id\"=?", o.ID),
	)

	query := DestinationRanks(queryMods...)
	queries.SetFrom(query.Query, "\"destination_rank\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"destination_rank\".*"})
	}

	return query
}

// LoadDestinationDetails allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (destinationL) LoadDestinationDetails(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDestination interface{}, mods queries.Applicator) error {
	var slice []*Destination
	var object *Destination

	if singular {
		object = maybeDestination.(*Destination)
	} else {
		slice = *maybeDestination.(*[]*Destination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &destinationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &destinationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`destination_detail`),
		qm.WhereIn(`destination_detail.destination_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load destination_detail")
	}

	var resultSlice []*DestinationDetail
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice destination_detail")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on destination_detail")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for destination_detail")
	}

	if len(destinationDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DestinationDetails = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &destinationDetailR{}
			}
			foreign.R.Destination = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DestinationID) {
				local.R.DestinationDetails = append(local.R.DestinationDetails, foreign)
				if foreign.R == nil {
					foreign.R = &destinationDetailR{}
				}
				foreign.R.Destination = local
				break
			}
		}
	}

	return nil
}

// LoadDestinationRanks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (destinationL) LoadDestinationRanks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDestination interface{}, mods queries.Applicator) error {
	var slice []*Destination
	var object *Destination

	if singular {
		object = maybeDestination.(*Destination)
	} else {
		slice = *maybeDestination.(*[]*Destination)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &destinationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &destinationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`destination_rank`),
		qm.WhereIn(`destination_rank.destination_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load destination_rank")
	}

	var resultSlice []*DestinationRank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice destination_rank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on destination_rank")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for destination_rank")
	}

	if len(destinationRankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DestinationRanks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &destinationRankR{}
			}
			foreign.R.Destination = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DestinationID {
				local.R.DestinationRanks = append(local.R.DestinationRanks, foreign)
				if foreign.R == nil {
					foreign.R = &destinationRankR{}
				}
				foreign.R.Destination = local
				break
			}
		}
	}

	return nil
}

// AddDestinationDetails adds the given related objects to the existing relationships
// of the destination, optionally inserting them as new records.
// Appends related to o.R.DestinationDetails.
// Sets related.R.Destination appropriately.
func (o *Destination) AddDestinationDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DestinationDetail) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DestinationID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"destination_detail\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"destination_id"}),
				strmangle.WhereClause("\"", "\"", 2, destinationDetailPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DestinationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &destinationR{
			DestinationDetails: related,
		}
	} else {
		o.R.DestinationDetails = append(o.R.DestinationDetails, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &destinationDetailR{
				Destination: o,
			}
		} else {
			rel.R.Destination = o
		}
	}
	return nil
}

// SetDestinationDetails removes all previously related items of the
// destination replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Destination's DestinationDetails accordingly.
// Replaces o.R.DestinationDetails with related.
// Sets related.R.Destination's DestinationDetails accordingly.
func (o *Destination) SetDestinationDetails(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DestinationDetail) error {
	query := "update \"destination_detail\" set \"destination_id\" = null where \"destination_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DestinationDetails {
			queries.SetScanner(&rel.DestinationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Destination = nil
		}

		o.R.DestinationDetails = nil
	}
	return o.AddDestinationDetails(ctx, exec, insert, related...)
}

// RemoveDestinationDetails relationships from objects passed in.
// Removes related items from R.DestinationDetails (uses pointer comparison, removal does not keep order)
// Sets related.R.Destination.
func (o *Destination) RemoveDestinationDetails(ctx context.Context, exec boil.ContextExecutor, related ...*DestinationDetail) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DestinationID, nil)
		if rel.R != nil {
			rel.R.Destination = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("destination_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DestinationDetails {
			if rel != ri {
				continue
			}

			ln := len(o.R.DestinationDetails)
			if ln > 1 && i < ln-1 {
				o.R.DestinationDetails[i] = o.R.DestinationDetails[ln-1]
			}
			o.R.DestinationDetails = o.R.DestinationDetails[:ln-1]
			break
		}
	}

	return nil
}

// AddDestinationRanks adds the given related objects to the existing relationships
// of the destination, optionally inserting them as new records.
// Appends related to o.R.DestinationRanks.
// Sets related.R.Destination appropriately.
func (o *Destination) AddDestinationRanks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DestinationRank) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DestinationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"destination_rank\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"destination_id"}),
				strmangle.WhereClause("\"", "\"", 2, destinationRankPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DestinationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &destinationR{
			DestinationRanks: related,
		}
	} else {
		o.R.DestinationRanks = append(o.R.DestinationRanks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &destinationRankR{
				Destination: o,
			}
		} else {
			rel.R.Destination = o
		}
	}
	return nil
}

// Destinations retrieves all the records using an executor.
func Destinations(mods ...qm.QueryMod) destinationQuery {
	mods = append(mods, qm.From("\"destination\""))
	return destinationQuery{NewQuery(mods...)}
}

// FindDestination retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDestination(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Destination, error) {
	destinationObj := &Destination{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"destination\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, destinationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from destination")
	}

	if err = destinationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return destinationObj, err
	}

	return destinationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Destination) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no destination provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(destinationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	destinationInsertCacheMut.RLock()
	cache, cached := destinationInsertCache[key]
	destinationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			destinationAllColumns,
			destinationColumnsWithDefault,
			destinationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(destinationType, destinationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(destinationType, destinationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"destination\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"destination\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into destination")
	}

	if !cached {
		destinationInsertCacheMut.Lock()
		destinationInsertCache[key] = cache
		destinationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Destination.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Destination) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	destinationUpdateCacheMut.RLock()
	cache, cached := destinationUpdateCache[key]
	destinationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			destinationAllColumns,
			destinationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update destination, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"destination\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, destinationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(destinationType, destinationMapping, append(wl, destinationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update destination row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for destination")
	}

	if !cached {
		destinationUpdateCacheMut.Lock()
		destinationUpdateCache[key] = cache
		destinationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q destinationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for destination")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for destination")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DestinationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), destinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"destination\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, destinationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in destination slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all destination")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Destination) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no destination provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(destinationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	destinationUpsertCacheMut.RLock()
	cache, cached := destinationUpsertCache[key]
	destinationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			destinationAllColumns,
			destinationColumnsWithDefault,
			destinationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			destinationAllColumns,
			destinationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert destination, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(destinationPrimaryKeyColumns))
			copy(conflict, destinationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"destination\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(destinationType, destinationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(destinationType, destinationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert destination")
	}

	if !cached {
		destinationUpsertCacheMut.Lock()
		destinationUpsertCache[key] = cache
		destinationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Destination record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Destination) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Destination provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), destinationPrimaryKeyMapping)
	sql := "DELETE FROM \"destination\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from destination")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for destination")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q destinationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no destinationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from destination")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for destination")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DestinationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(destinationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), destinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"destination\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, destinationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from destination slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for destination")
	}

	if len(destinationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Destination) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDestination(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DestinationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DestinationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), destinationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"destination\".* FROM \"destination\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, destinationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DestinationSlice")
	}

	*o = slice

	return nil
}

// DestinationExists checks if the Destination row exists.
func DestinationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"destination\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if destination exists")
	}

	return exists, nil
}
