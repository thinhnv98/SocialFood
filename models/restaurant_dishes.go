// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RestaurantDish is an object representing the database table.
type RestaurantDish struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	RestaurantID int         `boil:"restaurant_id" json:"restaurant_id" toml:"restaurant_id" yaml:"restaurant_id"`
	Name         null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Price        null.String `boil:"price" json:"price,omitempty" toml:"price" yaml:"price,omitempty"`
	Numphotos    null.Int    `boil:"numphotos" json:"numPhotos,omitempty" toml:"numphotos" yaml:"numphotos,omitempty"`
	Photo        null.String `boil:"photo" json:"photo,omitempty" toml:"photo" yaml:"photo,omitempty"`

	R *restaurantDishR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L restaurantDishL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RestaurantDishColumns = struct {
	ID           string
	RestaurantID string
	Name         string
	Price        string
	Numphotos    string
	Photo        string
}{
	ID:           "id",
	RestaurantID: "restaurant_id",
	Name:         "name",
	Price:        "price",
	Numphotos:    "numphotos",
	Photo:        "photo",
}

var RestaurantDishTableColumns = struct {
	ID           string
	RestaurantID string
	Name         string
	Price        string
	Numphotos    string
	Photo        string
}{
	ID:           "restaurant_dishes.id",
	RestaurantID: "restaurant_dishes.restaurant_id",
	Name:         "restaurant_dishes.name",
	Price:        "restaurant_dishes.price",
	Numphotos:    "restaurant_dishes.numphotos",
	Photo:        "restaurant_dishes.photo",
}

// Generated where

var RestaurantDishWhere = struct {
	ID           whereHelperint
	RestaurantID whereHelperint
	Name         whereHelpernull_String
	Price        whereHelpernull_String
	Numphotos    whereHelpernull_Int
	Photo        whereHelpernull_String
}{
	ID:           whereHelperint{field: "\"restaurant_dishes\".\"id\""},
	RestaurantID: whereHelperint{field: "\"restaurant_dishes\".\"restaurant_id\""},
	Name:         whereHelpernull_String{field: "\"restaurant_dishes\".\"name\""},
	Price:        whereHelpernull_String{field: "\"restaurant_dishes\".\"price\""},
	Numphotos:    whereHelpernull_Int{field: "\"restaurant_dishes\".\"numphotos\""},
	Photo:        whereHelpernull_String{field: "\"restaurant_dishes\".\"photo\""},
}

// RestaurantDishRels is where relationship names are stored.
var RestaurantDishRels = struct {
	Restaurant string
}{
	Restaurant: "Restaurant",
}

// restaurantDishR is where relationships are stored.
type restaurantDishR struct {
	Restaurant *Restaurant `boil:"Restaurant" json:"Restaurant" toml:"Restaurant" yaml:"Restaurant"`
}

// NewStruct creates a new relationship struct
func (*restaurantDishR) NewStruct() *restaurantDishR {
	return &restaurantDishR{}
}

// restaurantDishL is where Load methods for each relationship are stored.
type restaurantDishL struct{}

var (
	restaurantDishAllColumns            = []string{"id", "restaurant_id", "name", "price", "numphotos", "photo"}
	restaurantDishColumnsWithoutDefault = []string{"restaurant_id", "name", "price", "numphotos", "photo"}
	restaurantDishColumnsWithDefault    = []string{"id"}
	restaurantDishPrimaryKeyColumns     = []string{"id"}
)

type (
	// RestaurantDishSlice is an alias for a slice of pointers to RestaurantDish.
	// This should almost always be used instead of []RestaurantDish.
	RestaurantDishSlice []*RestaurantDish
	// RestaurantDishHook is the signature for custom RestaurantDish hook methods
	RestaurantDishHook func(context.Context, boil.ContextExecutor, *RestaurantDish) error

	restaurantDishQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	restaurantDishType                 = reflect.TypeOf(&RestaurantDish{})
	restaurantDishMapping              = queries.MakeStructMapping(restaurantDishType)
	restaurantDishPrimaryKeyMapping, _ = queries.BindMapping(restaurantDishType, restaurantDishMapping, restaurantDishPrimaryKeyColumns)
	restaurantDishInsertCacheMut       sync.RWMutex
	restaurantDishInsertCache          = make(map[string]insertCache)
	restaurantDishUpdateCacheMut       sync.RWMutex
	restaurantDishUpdateCache          = make(map[string]updateCache)
	restaurantDishUpsertCacheMut       sync.RWMutex
	restaurantDishUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var restaurantDishBeforeInsertHooks []RestaurantDishHook
var restaurantDishBeforeUpdateHooks []RestaurantDishHook
var restaurantDishBeforeDeleteHooks []RestaurantDishHook
var restaurantDishBeforeUpsertHooks []RestaurantDishHook

var restaurantDishAfterInsertHooks []RestaurantDishHook
var restaurantDishAfterSelectHooks []RestaurantDishHook
var restaurantDishAfterUpdateHooks []RestaurantDishHook
var restaurantDishAfterDeleteHooks []RestaurantDishHook
var restaurantDishAfterUpsertHooks []RestaurantDishHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RestaurantDish) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantDishBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RestaurantDish) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantDishBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RestaurantDish) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantDishBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RestaurantDish) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantDishBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RestaurantDish) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantDishAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RestaurantDish) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantDishAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RestaurantDish) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantDishAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RestaurantDish) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantDishAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RestaurantDish) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantDishAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRestaurantDishHook registers your hook function for all future operations.
func AddRestaurantDishHook(hookPoint boil.HookPoint, restaurantDishHook RestaurantDishHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		restaurantDishBeforeInsertHooks = append(restaurantDishBeforeInsertHooks, restaurantDishHook)
	case boil.BeforeUpdateHook:
		restaurantDishBeforeUpdateHooks = append(restaurantDishBeforeUpdateHooks, restaurantDishHook)
	case boil.BeforeDeleteHook:
		restaurantDishBeforeDeleteHooks = append(restaurantDishBeforeDeleteHooks, restaurantDishHook)
	case boil.BeforeUpsertHook:
		restaurantDishBeforeUpsertHooks = append(restaurantDishBeforeUpsertHooks, restaurantDishHook)
	case boil.AfterInsertHook:
		restaurantDishAfterInsertHooks = append(restaurantDishAfterInsertHooks, restaurantDishHook)
	case boil.AfterSelectHook:
		restaurantDishAfterSelectHooks = append(restaurantDishAfterSelectHooks, restaurantDishHook)
	case boil.AfterUpdateHook:
		restaurantDishAfterUpdateHooks = append(restaurantDishAfterUpdateHooks, restaurantDishHook)
	case boil.AfterDeleteHook:
		restaurantDishAfterDeleteHooks = append(restaurantDishAfterDeleteHooks, restaurantDishHook)
	case boil.AfterUpsertHook:
		restaurantDishAfterUpsertHooks = append(restaurantDishAfterUpsertHooks, restaurantDishHook)
	}
}

// One returns a single restaurantDish record from the query.
func (q restaurantDishQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RestaurantDish, error) {
	o := &RestaurantDish{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for restaurant_dishes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RestaurantDish records from the query.
func (q restaurantDishQuery) All(ctx context.Context, exec boil.ContextExecutor) (RestaurantDishSlice, error) {
	var o []*RestaurantDish

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RestaurantDish slice")
	}

	if len(restaurantDishAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RestaurantDish records in the query.
func (q restaurantDishQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count restaurant_dishes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q restaurantDishQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if restaurant_dishes exists")
	}

	return count > 0, nil
}

// Restaurant pointed to by the foreign key.
func (o *RestaurantDish) Restaurant(mods ...qm.QueryMod) restaurantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RestaurantID),
	}

	queryMods = append(queryMods, mods...)

	query := Restaurants(queryMods...)
	queries.SetFrom(query.Query, "\"restaurant\"")

	return query
}

// LoadRestaurant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (restaurantDishL) LoadRestaurant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurantDish interface{}, mods queries.Applicator) error {
	var slice []*RestaurantDish
	var object *RestaurantDish

	if singular {
		object = maybeRestaurantDish.(*RestaurantDish)
	} else {
		slice = *maybeRestaurantDish.(*[]*RestaurantDish)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantDishR{}
		}
		args = append(args, object.RestaurantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantDishR{}
			}

			for _, a := range args {
				if a == obj.RestaurantID {
					continue Outer
				}
			}

			args = append(args, obj.RestaurantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`restaurant`),
		qm.WhereIn(`restaurant.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Restaurant")
	}

	var resultSlice []*Restaurant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Restaurant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for restaurant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for restaurant")
	}

	if len(restaurantDishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Restaurant = foreign
		if foreign.R == nil {
			foreign.R = &restaurantR{}
		}
		foreign.R.RestaurantDishes = append(foreign.R.RestaurantDishes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RestaurantID == foreign.ID {
				local.R.Restaurant = foreign
				if foreign.R == nil {
					foreign.R = &restaurantR{}
				}
				foreign.R.RestaurantDishes = append(foreign.R.RestaurantDishes, local)
				break
			}
		}
	}

	return nil
}

// SetRestaurant of the restaurantDish to the related item.
// Sets o.R.Restaurant to related.
// Adds o to related.R.RestaurantDishes.
func (o *RestaurantDish) SetRestaurant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Restaurant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"restaurant_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"restaurant_id"}),
		strmangle.WhereClause("\"", "\"", 2, restaurantDishPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RestaurantID = related.ID
	if o.R == nil {
		o.R = &restaurantDishR{
			Restaurant: related,
		}
	} else {
		o.R.Restaurant = related
	}

	if related.R == nil {
		related.R = &restaurantR{
			RestaurantDishes: RestaurantDishSlice{o},
		}
	} else {
		related.R.RestaurantDishes = append(related.R.RestaurantDishes, o)
	}

	return nil
}

// RestaurantDishes retrieves all the records using an executor.
func RestaurantDishes(mods ...qm.QueryMod) restaurantDishQuery {
	mods = append(mods, qm.From("\"restaurant_dishes\""))
	return restaurantDishQuery{NewQuery(mods...)}
}

// FindRestaurantDish retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRestaurantDish(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RestaurantDish, error) {
	restaurantDishObj := &RestaurantDish{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"restaurant_dishes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, restaurantDishObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from restaurant_dishes")
	}

	if err = restaurantDishObj.doAfterSelectHooks(ctx, exec); err != nil {
		return restaurantDishObj, err
	}

	return restaurantDishObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RestaurantDish) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no restaurant_dishes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantDishColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	restaurantDishInsertCacheMut.RLock()
	cache, cached := restaurantDishInsertCache[key]
	restaurantDishInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			restaurantDishAllColumns,
			restaurantDishColumnsWithDefault,
			restaurantDishColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(restaurantDishType, restaurantDishMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(restaurantDishType, restaurantDishMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"restaurant_dishes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"restaurant_dishes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into restaurant_dishes")
	}

	if !cached {
		restaurantDishInsertCacheMut.Lock()
		restaurantDishInsertCache[key] = cache
		restaurantDishInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RestaurantDish.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RestaurantDish) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	restaurantDishUpdateCacheMut.RLock()
	cache, cached := restaurantDishUpdateCache[key]
	restaurantDishUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			restaurantDishAllColumns,
			restaurantDishPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update restaurant_dishes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"restaurant_dishes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, restaurantDishPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(restaurantDishType, restaurantDishMapping, append(wl, restaurantDishPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update restaurant_dishes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for restaurant_dishes")
	}

	if !cached {
		restaurantDishUpdateCacheMut.Lock()
		restaurantDishUpdateCache[key] = cache
		restaurantDishUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q restaurantDishQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for restaurant_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for restaurant_dishes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RestaurantDishSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"restaurant_dishes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, restaurantDishPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in restaurantDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all restaurantDish")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RestaurantDish) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no restaurant_dishes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantDishColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	restaurantDishUpsertCacheMut.RLock()
	cache, cached := restaurantDishUpsertCache[key]
	restaurantDishUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			restaurantDishAllColumns,
			restaurantDishColumnsWithDefault,
			restaurantDishColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			restaurantDishAllColumns,
			restaurantDishPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert restaurant_dishes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(restaurantDishPrimaryKeyColumns))
			copy(conflict, restaurantDishPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"restaurant_dishes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(restaurantDishType, restaurantDishMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(restaurantDishType, restaurantDishMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert restaurant_dishes")
	}

	if !cached {
		restaurantDishUpsertCacheMut.Lock()
		restaurantDishUpsertCache[key] = cache
		restaurantDishUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RestaurantDish record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RestaurantDish) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RestaurantDish provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), restaurantDishPrimaryKeyMapping)
	sql := "DELETE FROM \"restaurant_dishes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from restaurant_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for restaurant_dishes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q restaurantDishQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no restaurantDishQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from restaurant_dishes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for restaurant_dishes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RestaurantDishSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(restaurantDishBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"restaurant_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restaurantDishPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from restaurantDish slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for restaurant_dishes")
	}

	if len(restaurantDishAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RestaurantDish) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRestaurantDish(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestaurantDishSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RestaurantDishSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantDishPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"restaurant_dishes\".* FROM \"restaurant_dishes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restaurantDishPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RestaurantDishSlice")
	}

	*o = slice

	return nil
}

// RestaurantDishExists checks if the RestaurantDish row exists.
func RestaurantDishExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"restaurant_dishes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if restaurant_dishes exists")
	}

	return exists, nil
}
