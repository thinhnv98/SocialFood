// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDestinations(t *testing.T) {
	t.Parallel()

	query := Destinations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDestinationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDestinationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Destinations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDestinationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DestinationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDestinationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DestinationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Destination exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DestinationExists to return true, but got false.")
	}
}

func testDestinationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	destinationFound, err := FindDestination(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if destinationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDestinationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Destinations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDestinationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Destinations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDestinationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	destinationOne := &Destination{}
	destinationTwo := &Destination{}
	if err = randomize.Struct(seed, destinationOne, destinationDBTypes, false, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}
	if err = randomize.Struct(seed, destinationTwo, destinationDBTypes, false, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = destinationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = destinationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Destinations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDestinationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	destinationOne := &Destination{}
	destinationTwo := &Destination{}
	if err = randomize.Struct(seed, destinationOne, destinationDBTypes, false, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}
	if err = randomize.Struct(seed, destinationTwo, destinationDBTypes, false, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = destinationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = destinationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func destinationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Destination) error {
	*o = Destination{}
	return nil
}

func destinationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Destination) error {
	*o = Destination{}
	return nil
}

func destinationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Destination) error {
	*o = Destination{}
	return nil
}

func destinationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Destination) error {
	*o = Destination{}
	return nil
}

func destinationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Destination) error {
	*o = Destination{}
	return nil
}

func destinationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Destination) error {
	*o = Destination{}
	return nil
}

func destinationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Destination) error {
	*o = Destination{}
	return nil
}

func destinationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Destination) error {
	*o = Destination{}
	return nil
}

func destinationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Destination) error {
	*o = Destination{}
	return nil
}

func testDestinationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Destination{}
	o := &Destination{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, destinationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Destination object: %s", err)
	}

	AddDestinationHook(boil.BeforeInsertHook, destinationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	destinationBeforeInsertHooks = []DestinationHook{}

	AddDestinationHook(boil.AfterInsertHook, destinationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	destinationAfterInsertHooks = []DestinationHook{}

	AddDestinationHook(boil.AfterSelectHook, destinationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	destinationAfterSelectHooks = []DestinationHook{}

	AddDestinationHook(boil.BeforeUpdateHook, destinationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	destinationBeforeUpdateHooks = []DestinationHook{}

	AddDestinationHook(boil.AfterUpdateHook, destinationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	destinationAfterUpdateHooks = []DestinationHook{}

	AddDestinationHook(boil.BeforeDeleteHook, destinationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	destinationBeforeDeleteHooks = []DestinationHook{}

	AddDestinationHook(boil.AfterDeleteHook, destinationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	destinationAfterDeleteHooks = []DestinationHook{}

	AddDestinationHook(boil.BeforeUpsertHook, destinationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	destinationBeforeUpsertHooks = []DestinationHook{}

	AddDestinationHook(boil.AfterUpsertHook, destinationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	destinationAfterUpsertHooks = []DestinationHook{}
}

func testDestinationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDestinationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(destinationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDestinationToManyDestinationDetails(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Destination
	var b, c DestinationDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, destinationDetailDBTypes, false, destinationDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, destinationDetailDBTypes, false, destinationDetailColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DestinationID, a.ID)
	queries.Assign(&c.DestinationID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DestinationDetails().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DestinationID, b.DestinationID) {
			bFound = true
		}
		if queries.Equal(v.DestinationID, c.DestinationID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DestinationSlice{&a}
	if err = a.L.LoadDestinationDetails(ctx, tx, false, (*[]*Destination)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DestinationDetails = nil
	if err = a.L.LoadDestinationDetails(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationDetails); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDestinationToManyDestinationRanks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Destination
	var b, c DestinationRank

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, destinationRankDBTypes, false, destinationRankColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, destinationRankDBTypes, false, destinationRankColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DestinationID = a.ID
	c.DestinationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DestinationRanks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DestinationID == b.DestinationID {
			bFound = true
		}
		if v.DestinationID == c.DestinationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DestinationSlice{&a}
	if err = a.L.LoadDestinationRanks(ctx, tx, false, (*[]*Destination)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationRanks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DestinationRanks = nil
	if err = a.L.LoadDestinationRanks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationRanks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDestinationToManyAddOpDestinationDetails(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Destination
	var b, c, d, e DestinationDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, destinationDBTypes, false, strmangle.SetComplement(destinationPrimaryKeyColumns, destinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DestinationDetail{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, destinationDetailDBTypes, false, strmangle.SetComplement(destinationDetailPrimaryKeyColumns, destinationDetailColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DestinationDetail{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDestinationDetails(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DestinationID) {
			t.Error("foreign key was wrong value", a.ID, first.DestinationID)
		}
		if !queries.Equal(a.ID, second.DestinationID) {
			t.Error("foreign key was wrong value", a.ID, second.DestinationID)
		}

		if first.R.Destination != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Destination != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DestinationDetails[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DestinationDetails[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DestinationDetails().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDestinationToManySetOpDestinationDetails(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Destination
	var b, c, d, e DestinationDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, destinationDBTypes, false, strmangle.SetComplement(destinationPrimaryKeyColumns, destinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DestinationDetail{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, destinationDetailDBTypes, false, strmangle.SetComplement(destinationDetailPrimaryKeyColumns, destinationDetailColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDestinationDetails(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDestinationDetails(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DestinationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DestinationID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DestinationID) {
		t.Error("foreign key was wrong value", a.ID, d.DestinationID)
	}
	if !queries.Equal(a.ID, e.DestinationID) {
		t.Error("foreign key was wrong value", a.ID, e.DestinationID)
	}

	if b.R.Destination != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Destination != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Destination != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Destination != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DestinationDetails[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DestinationDetails[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDestinationToManyRemoveOpDestinationDetails(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Destination
	var b, c, d, e DestinationDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, destinationDBTypes, false, strmangle.SetComplement(destinationPrimaryKeyColumns, destinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DestinationDetail{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, destinationDetailDBTypes, false, strmangle.SetComplement(destinationDetailPrimaryKeyColumns, destinationDetailColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDestinationDetails(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDestinationDetails(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DestinationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DestinationID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Destination != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Destination != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Destination != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Destination != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DestinationDetails) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DestinationDetails[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DestinationDetails[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDestinationToManyAddOpDestinationRanks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Destination
	var b, c, d, e DestinationRank

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, destinationDBTypes, false, strmangle.SetComplement(destinationPrimaryKeyColumns, destinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DestinationRank{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, destinationRankDBTypes, false, strmangle.SetComplement(destinationRankPrimaryKeyColumns, destinationRankColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DestinationRank{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDestinationRanks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DestinationID {
			t.Error("foreign key was wrong value", a.ID, first.DestinationID)
		}
		if a.ID != second.DestinationID {
			t.Error("foreign key was wrong value", a.ID, second.DestinationID)
		}

		if first.R.Destination != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Destination != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DestinationRanks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DestinationRanks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DestinationRanks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDestinationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDestinationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DestinationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDestinationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Destinations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	destinationDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`, `Country`: `text`, `Description`: `text`, `Imagename`: `text`, `Imagedata`: `text`, `Latitude`: `double precision`, `Longitude`: `double precision`}
	_                  = bytes.MinRead
)

func testDestinationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(destinationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(destinationAllColumns) == len(destinationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDestinationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(destinationAllColumns) == len(destinationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Destination{}
	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, destinationDBTypes, true, destinationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(destinationAllColumns, destinationPrimaryKeyColumns) {
		fields = destinationAllColumns
	} else {
		fields = strmangle.SetComplement(
			destinationAllColumns,
			destinationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DestinationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDestinationsUpsert(t *testing.T) {
	t.Parallel()

	if len(destinationAllColumns) == len(destinationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Destination{}
	if err = randomize.Struct(seed, &o, destinationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Destination: %s", err)
	}

	count, err := Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, destinationDBTypes, false, destinationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Destination: %s", err)
	}

	count, err = Destinations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
