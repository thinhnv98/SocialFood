// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRestaurantDishes(t *testing.T) {
	t.Parallel()

	query := RestaurantDishes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRestaurantDishesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRestaurantDishesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RestaurantDishes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRestaurantDishesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RestaurantDishSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRestaurantDishesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RestaurantDishExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RestaurantDish exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RestaurantDishExists to return true, but got false.")
	}
}

func testRestaurantDishesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	restaurantDishFound, err := FindRestaurantDish(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if restaurantDishFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRestaurantDishesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RestaurantDishes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRestaurantDishesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RestaurantDishes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRestaurantDishesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	restaurantDishOne := &RestaurantDish{}
	restaurantDishTwo := &RestaurantDish{}
	if err = randomize.Struct(seed, restaurantDishOne, restaurantDishDBTypes, false, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}
	if err = randomize.Struct(seed, restaurantDishTwo, restaurantDishDBTypes, false, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = restaurantDishOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = restaurantDishTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RestaurantDishes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRestaurantDishesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	restaurantDishOne := &RestaurantDish{}
	restaurantDishTwo := &RestaurantDish{}
	if err = randomize.Struct(seed, restaurantDishOne, restaurantDishDBTypes, false, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}
	if err = randomize.Struct(seed, restaurantDishTwo, restaurantDishDBTypes, false, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = restaurantDishOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = restaurantDishTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func restaurantDishBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantDish) error {
	*o = RestaurantDish{}
	return nil
}

func restaurantDishAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantDish) error {
	*o = RestaurantDish{}
	return nil
}

func restaurantDishAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantDish) error {
	*o = RestaurantDish{}
	return nil
}

func restaurantDishBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantDish) error {
	*o = RestaurantDish{}
	return nil
}

func restaurantDishAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantDish) error {
	*o = RestaurantDish{}
	return nil
}

func restaurantDishBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantDish) error {
	*o = RestaurantDish{}
	return nil
}

func restaurantDishAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantDish) error {
	*o = RestaurantDish{}
	return nil
}

func restaurantDishBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantDish) error {
	*o = RestaurantDish{}
	return nil
}

func restaurantDishAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RestaurantDish) error {
	*o = RestaurantDish{}
	return nil
}

func testRestaurantDishesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RestaurantDish{}
	o := &RestaurantDish{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RestaurantDish object: %s", err)
	}

	AddRestaurantDishHook(boil.BeforeInsertHook, restaurantDishBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	restaurantDishBeforeInsertHooks = []RestaurantDishHook{}

	AddRestaurantDishHook(boil.AfterInsertHook, restaurantDishAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	restaurantDishAfterInsertHooks = []RestaurantDishHook{}

	AddRestaurantDishHook(boil.AfterSelectHook, restaurantDishAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	restaurantDishAfterSelectHooks = []RestaurantDishHook{}

	AddRestaurantDishHook(boil.BeforeUpdateHook, restaurantDishBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	restaurantDishBeforeUpdateHooks = []RestaurantDishHook{}

	AddRestaurantDishHook(boil.AfterUpdateHook, restaurantDishAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	restaurantDishAfterUpdateHooks = []RestaurantDishHook{}

	AddRestaurantDishHook(boil.BeforeDeleteHook, restaurantDishBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	restaurantDishBeforeDeleteHooks = []RestaurantDishHook{}

	AddRestaurantDishHook(boil.AfterDeleteHook, restaurantDishAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	restaurantDishAfterDeleteHooks = []RestaurantDishHook{}

	AddRestaurantDishHook(boil.BeforeUpsertHook, restaurantDishBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	restaurantDishBeforeUpsertHooks = []RestaurantDishHook{}

	AddRestaurantDishHook(boil.AfterUpsertHook, restaurantDishAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	restaurantDishAfterUpsertHooks = []RestaurantDishHook{}
}

func testRestaurantDishesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRestaurantDishesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(restaurantDishColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRestaurantDishToOneRestaurantUsingRestaurant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RestaurantDish
	var foreign Restaurant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, restaurantDishDBTypes, false, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, restaurantDBTypes, false, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RestaurantID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Restaurant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RestaurantDishSlice{&local}
	if err = local.L.LoadRestaurant(ctx, tx, false, (*[]*RestaurantDish)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Restaurant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Restaurant = nil
	if err = local.L.LoadRestaurant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Restaurant == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRestaurantDishToOneSetOpRestaurantUsingRestaurant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RestaurantDish
	var b, c Restaurant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDishDBTypes, false, strmangle.SetComplement(restaurantDishPrimaryKeyColumns, restaurantDishColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Restaurant{&b, &c} {
		err = a.SetRestaurant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Restaurant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RestaurantDishes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RestaurantID != x.ID {
			t.Error("foreign key was wrong value", a.RestaurantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RestaurantID))
		reflect.Indirect(reflect.ValueOf(&a.RestaurantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RestaurantID != x.ID {
			t.Error("foreign key was wrong value", a.RestaurantID, x.ID)
		}
	}
}

func testRestaurantDishesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRestaurantDishesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RestaurantDishSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRestaurantDishesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RestaurantDishes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	restaurantDishDBTypes = map[string]string{`ID`: `integer`, `RestaurantID`: `integer`, `Name`: `text`, `Price`: `text`, `Numphotos`: `integer`, `Photo`: `text`}
	_                     = bytes.MinRead
)

func testRestaurantDishesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(restaurantDishPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(restaurantDishAllColumns) == len(restaurantDishPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRestaurantDishesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(restaurantDishAllColumns) == len(restaurantDishPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RestaurantDish{}
	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, restaurantDishDBTypes, true, restaurantDishPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(restaurantDishAllColumns, restaurantDishPrimaryKeyColumns) {
		fields = restaurantDishAllColumns
	} else {
		fields = strmangle.SetComplement(
			restaurantDishAllColumns,
			restaurantDishPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RestaurantDishSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRestaurantDishesUpsert(t *testing.T) {
	t.Parallel()

	if len(restaurantDishAllColumns) == len(restaurantDishPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RestaurantDish{}
	if err = randomize.Struct(seed, &o, restaurantDishDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RestaurantDish: %s", err)
	}

	count, err := RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, restaurantDishDBTypes, false, restaurantDishPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RestaurantDish struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RestaurantDish: %s", err)
	}

	count, err = RestaurantDishes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
