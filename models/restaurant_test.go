// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRestaurants(t *testing.T) {
	t.Parallel()

	query := Restaurants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRestaurantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRestaurantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Restaurants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRestaurantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RestaurantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRestaurantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RestaurantExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Restaurant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RestaurantExists to return true, but got false.")
	}
}

func testRestaurantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	restaurantFound, err := FindRestaurant(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if restaurantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRestaurantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Restaurants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRestaurantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Restaurants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRestaurantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	restaurantOne := &Restaurant{}
	restaurantTwo := &Restaurant{}
	if err = randomize.Struct(seed, restaurantOne, restaurantDBTypes, false, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}
	if err = randomize.Struct(seed, restaurantTwo, restaurantDBTypes, false, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = restaurantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = restaurantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Restaurants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRestaurantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	restaurantOne := &Restaurant{}
	restaurantTwo := &Restaurant{}
	if err = randomize.Struct(seed, restaurantOne, restaurantDBTypes, false, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}
	if err = randomize.Struct(seed, restaurantTwo, restaurantDBTypes, false, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = restaurantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = restaurantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func restaurantBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Restaurant) error {
	*o = Restaurant{}
	return nil
}

func restaurantAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Restaurant) error {
	*o = Restaurant{}
	return nil
}

func restaurantAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Restaurant) error {
	*o = Restaurant{}
	return nil
}

func restaurantBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Restaurant) error {
	*o = Restaurant{}
	return nil
}

func restaurantAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Restaurant) error {
	*o = Restaurant{}
	return nil
}

func restaurantBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Restaurant) error {
	*o = Restaurant{}
	return nil
}

func restaurantAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Restaurant) error {
	*o = Restaurant{}
	return nil
}

func restaurantBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Restaurant) error {
	*o = Restaurant{}
	return nil
}

func restaurantAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Restaurant) error {
	*o = Restaurant{}
	return nil
}

func testRestaurantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Restaurant{}
	o := &Restaurant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, restaurantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Restaurant object: %s", err)
	}

	AddRestaurantHook(boil.BeforeInsertHook, restaurantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	restaurantBeforeInsertHooks = []RestaurantHook{}

	AddRestaurantHook(boil.AfterInsertHook, restaurantAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	restaurantAfterInsertHooks = []RestaurantHook{}

	AddRestaurantHook(boil.AfterSelectHook, restaurantAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	restaurantAfterSelectHooks = []RestaurantHook{}

	AddRestaurantHook(boil.BeforeUpdateHook, restaurantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	restaurantBeforeUpdateHooks = []RestaurantHook{}

	AddRestaurantHook(boil.AfterUpdateHook, restaurantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	restaurantAfterUpdateHooks = []RestaurantHook{}

	AddRestaurantHook(boil.BeforeDeleteHook, restaurantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	restaurantBeforeDeleteHooks = []RestaurantHook{}

	AddRestaurantHook(boil.AfterDeleteHook, restaurantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	restaurantAfterDeleteHooks = []RestaurantHook{}

	AddRestaurantHook(boil.BeforeUpsertHook, restaurantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	restaurantBeforeUpsertHooks = []RestaurantHook{}

	AddRestaurantHook(boil.AfterUpsertHook, restaurantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	restaurantAfterUpsertHooks = []RestaurantHook{}
}

func testRestaurantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRestaurantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(restaurantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRestaurantToManyRestaurantDishes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b, c RestaurantDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, restaurantDishDBTypes, false, restaurantDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, restaurantDishDBTypes, false, restaurantDishColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RestaurantID = a.ID
	c.RestaurantID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RestaurantDishes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RestaurantID == b.RestaurantID {
			bFound = true
		}
		if v.RestaurantID == c.RestaurantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RestaurantSlice{&a}
	if err = a.L.LoadRestaurantDishes(ctx, tx, false, (*[]*Restaurant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RestaurantDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RestaurantDishes = nil
	if err = a.L.LoadRestaurantDishes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RestaurantDishes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRestaurantToManyRestaurantPhotos(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b, c RestaurantPhoto

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, restaurantPhotoDBTypes, false, restaurantPhotoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, restaurantPhotoDBTypes, false, restaurantPhotoColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RestaurantID = a.ID
	c.RestaurantID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RestaurantPhotos().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RestaurantID == b.RestaurantID {
			bFound = true
		}
		if v.RestaurantID == c.RestaurantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RestaurantSlice{&a}
	if err = a.L.LoadRestaurantPhotos(ctx, tx, false, (*[]*Restaurant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RestaurantPhotos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RestaurantPhotos = nil
	if err = a.L.LoadRestaurantPhotos(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RestaurantPhotos); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRestaurantToManyRestaurantRanks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b, c RestaurantRank

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, restaurantRankDBTypes, false, restaurantRankColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, restaurantRankDBTypes, false, restaurantRankColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RestaurantID = a.ID
	c.RestaurantID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RestaurantRanks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RestaurantID == b.RestaurantID {
			bFound = true
		}
		if v.RestaurantID == c.RestaurantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RestaurantSlice{&a}
	if err = a.L.LoadRestaurantRanks(ctx, tx, false, (*[]*Restaurant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RestaurantRanks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RestaurantRanks = nil
	if err = a.L.LoadRestaurantRanks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RestaurantRanks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRestaurantToManyRestaurantReviews(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b, c RestaurantReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, restaurantReviewDBTypes, false, restaurantReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, restaurantReviewDBTypes, false, restaurantReviewColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.RestaurantID = a.ID
	c.RestaurantID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RestaurantReviews().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.RestaurantID == b.RestaurantID {
			bFound = true
		}
		if v.RestaurantID == c.RestaurantID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RestaurantSlice{&a}
	if err = a.L.LoadRestaurantReviews(ctx, tx, false, (*[]*Restaurant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RestaurantReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RestaurantReviews = nil
	if err = a.L.LoadRestaurantReviews(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RestaurantReviews); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRestaurantToManyAddOpRestaurantDishes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b, c, d, e RestaurantDish

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RestaurantDish{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, restaurantDishDBTypes, false, strmangle.SetComplement(restaurantDishPrimaryKeyColumns, restaurantDishColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RestaurantDish{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRestaurantDishes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RestaurantID {
			t.Error("foreign key was wrong value", a.ID, first.RestaurantID)
		}
		if a.ID != second.RestaurantID {
			t.Error("foreign key was wrong value", a.ID, second.RestaurantID)
		}

		if first.R.Restaurant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Restaurant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RestaurantDishes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RestaurantDishes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RestaurantDishes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRestaurantToManyAddOpRestaurantPhotos(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b, c, d, e RestaurantPhoto

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RestaurantPhoto{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, restaurantPhotoDBTypes, false, strmangle.SetComplement(restaurantPhotoPrimaryKeyColumns, restaurantPhotoColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RestaurantPhoto{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRestaurantPhotos(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RestaurantID {
			t.Error("foreign key was wrong value", a.ID, first.RestaurantID)
		}
		if a.ID != second.RestaurantID {
			t.Error("foreign key was wrong value", a.ID, second.RestaurantID)
		}

		if first.R.Restaurant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Restaurant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RestaurantPhotos[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RestaurantPhotos[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RestaurantPhotos().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRestaurantToManyAddOpRestaurantRanks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b, c, d, e RestaurantRank

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RestaurantRank{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, restaurantRankDBTypes, false, strmangle.SetComplement(restaurantRankPrimaryKeyColumns, restaurantRankColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RestaurantRank{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRestaurantRanks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RestaurantID {
			t.Error("foreign key was wrong value", a.ID, first.RestaurantID)
		}
		if a.ID != second.RestaurantID {
			t.Error("foreign key was wrong value", a.ID, second.RestaurantID)
		}

		if first.R.Restaurant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Restaurant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RestaurantRanks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RestaurantRanks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RestaurantRanks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRestaurantToManyAddOpRestaurantReviews(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b, c, d, e RestaurantReview

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*RestaurantReview{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, restaurantReviewDBTypes, false, strmangle.SetComplement(restaurantReviewPrimaryKeyColumns, restaurantReviewColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*RestaurantReview{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRestaurantReviews(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RestaurantID {
			t.Error("foreign key was wrong value", a.ID, first.RestaurantID)
		}
		if a.ID != second.RestaurantID {
			t.Error("foreign key was wrong value", a.ID, second.RestaurantID)
		}

		if first.R.Restaurant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Restaurant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RestaurantReviews[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RestaurantReviews[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RestaurantReviews().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testRestaurantToOneAccountUsingCreatedByAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Restaurant
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatedBy, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreatedByAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RestaurantSlice{&local}
	if err = local.L.LoadCreatedByAccount(ctx, tx, false, (*[]*Restaurant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedByAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreatedByAccount = nil
	if err = local.L.LoadCreatedByAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedByAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRestaurantToOneSetOpAccountUsingCreatedByAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetCreatedByAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreatedByAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatedByRestaurants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatedBy, x.ID) {
			t.Error("foreign key was wrong value", a.CreatedBy)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatedBy))
		reflect.Indirect(reflect.ValueOf(&a.CreatedBy)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatedBy, x.ID) {
			t.Error("foreign key was wrong value", a.CreatedBy, x.ID)
		}
	}
}

func testRestaurantToOneRemoveOpAccountUsingCreatedByAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Restaurant
	var b Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, restaurantDBTypes, false, strmangle.SetComplement(restaurantPrimaryKeyColumns, restaurantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreatedByAccount(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreatedByAccount(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CreatedByAccount().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CreatedByAccount != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatedBy) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatedByRestaurants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRestaurantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRestaurantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RestaurantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRestaurantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Restaurants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	restaurantDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`, `Imagename`: `text`, `City`: `text`, `Country`: `text`, `Description`: `text`, `CreatedBy`: `integer`}
	_                 = bytes.MinRead
)

func testRestaurantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(restaurantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(restaurantAllColumns) == len(restaurantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRestaurantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(restaurantAllColumns) == len(restaurantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Restaurant{}
	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, restaurantDBTypes, true, restaurantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(restaurantAllColumns, restaurantPrimaryKeyColumns) {
		fields = restaurantAllColumns
	} else {
		fields = strmangle.SetComplement(
			restaurantAllColumns,
			restaurantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RestaurantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRestaurantsUpsert(t *testing.T) {
	t.Parallel()

	if len(restaurantAllColumns) == len(restaurantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Restaurant{}
	if err = randomize.Struct(seed, &o, restaurantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Restaurant: %s", err)
	}

	count, err := Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, restaurantDBTypes, false, restaurantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Restaurant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Restaurant: %s", err)
	}

	count, err = Restaurants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
