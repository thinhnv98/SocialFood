// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDestinationDetails(t *testing.T) {
	t.Parallel()

	query := DestinationDetails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDestinationDetailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDestinationDetailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DestinationDetails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDestinationDetailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DestinationDetailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDestinationDetailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DestinationDetailExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DestinationDetail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DestinationDetailExists to return true, but got false.")
	}
}

func testDestinationDetailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	destinationDetailFound, err := FindDestinationDetail(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if destinationDetailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDestinationDetailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DestinationDetails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDestinationDetailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DestinationDetails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDestinationDetailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	destinationDetailOne := &DestinationDetail{}
	destinationDetailTwo := &DestinationDetail{}
	if err = randomize.Struct(seed, destinationDetailOne, destinationDetailDBTypes, false, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, destinationDetailTwo, destinationDetailDBTypes, false, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = destinationDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = destinationDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DestinationDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDestinationDetailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	destinationDetailOne := &DestinationDetail{}
	destinationDetailTwo := &DestinationDetail{}
	if err = randomize.Struct(seed, destinationDetailOne, destinationDetailDBTypes, false, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}
	if err = randomize.Struct(seed, destinationDetailTwo, destinationDetailDBTypes, false, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = destinationDetailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = destinationDetailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func destinationDetailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DestinationDetail) error {
	*o = DestinationDetail{}
	return nil
}

func destinationDetailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DestinationDetail) error {
	*o = DestinationDetail{}
	return nil
}

func destinationDetailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DestinationDetail) error {
	*o = DestinationDetail{}
	return nil
}

func destinationDetailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DestinationDetail) error {
	*o = DestinationDetail{}
	return nil
}

func destinationDetailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DestinationDetail) error {
	*o = DestinationDetail{}
	return nil
}

func destinationDetailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DestinationDetail) error {
	*o = DestinationDetail{}
	return nil
}

func destinationDetailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DestinationDetail) error {
	*o = DestinationDetail{}
	return nil
}

func destinationDetailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DestinationDetail) error {
	*o = DestinationDetail{}
	return nil
}

func destinationDetailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DestinationDetail) error {
	*o = DestinationDetail{}
	return nil
}

func testDestinationDetailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DestinationDetail{}
	o := &DestinationDetail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DestinationDetail object: %s", err)
	}

	AddDestinationDetailHook(boil.BeforeInsertHook, destinationDetailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	destinationDetailBeforeInsertHooks = []DestinationDetailHook{}

	AddDestinationDetailHook(boil.AfterInsertHook, destinationDetailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	destinationDetailAfterInsertHooks = []DestinationDetailHook{}

	AddDestinationDetailHook(boil.AfterSelectHook, destinationDetailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	destinationDetailAfterSelectHooks = []DestinationDetailHook{}

	AddDestinationDetailHook(boil.BeforeUpdateHook, destinationDetailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	destinationDetailBeforeUpdateHooks = []DestinationDetailHook{}

	AddDestinationDetailHook(boil.AfterUpdateHook, destinationDetailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	destinationDetailAfterUpdateHooks = []DestinationDetailHook{}

	AddDestinationDetailHook(boil.BeforeDeleteHook, destinationDetailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	destinationDetailBeforeDeleteHooks = []DestinationDetailHook{}

	AddDestinationDetailHook(boil.AfterDeleteHook, destinationDetailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	destinationDetailAfterDeleteHooks = []DestinationDetailHook{}

	AddDestinationDetailHook(boil.BeforeUpsertHook, destinationDetailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	destinationDetailBeforeUpsertHooks = []DestinationDetailHook{}

	AddDestinationDetailHook(boil.AfterUpsertHook, destinationDetailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	destinationDetailAfterUpsertHooks = []DestinationDetailHook{}
}

func testDestinationDetailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDestinationDetailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(destinationDetailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDestinationDetailToOneDestinationUsingDestination(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DestinationDetail
	var foreign Destination

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, destinationDBTypes, false, destinationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Destination struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DestinationID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Destination().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DestinationDetailSlice{&local}
	if err = local.L.LoadDestination(ctx, tx, false, (*[]*DestinationDetail)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Destination == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Destination = nil
	if err = local.L.LoadDestination(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Destination == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDestinationDetailToOneSetOpDestinationUsingDestination(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DestinationDetail
	var b, c Destination

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, destinationDetailDBTypes, false, strmangle.SetComplement(destinationDetailPrimaryKeyColumns, destinationDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, destinationDBTypes, false, strmangle.SetComplement(destinationPrimaryKeyColumns, destinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, destinationDBTypes, false, strmangle.SetComplement(destinationPrimaryKeyColumns, destinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Destination{&b, &c} {
		err = a.SetDestination(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Destination != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DestinationDetails[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DestinationID, x.ID) {
			t.Error("foreign key was wrong value", a.DestinationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DestinationID))
		reflect.Indirect(reflect.ValueOf(&a.DestinationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DestinationID, x.ID) {
			t.Error("foreign key was wrong value", a.DestinationID, x.ID)
		}
	}
}

func testDestinationDetailToOneRemoveOpDestinationUsingDestination(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DestinationDetail
	var b Destination

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, destinationDetailDBTypes, false, strmangle.SetComplement(destinationDetailPrimaryKeyColumns, destinationDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, destinationDBTypes, false, strmangle.SetComplement(destinationPrimaryKeyColumns, destinationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDestination(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDestination(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Destination().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Destination != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DestinationID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DestinationDetails) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDestinationDetailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDestinationDetailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DestinationDetailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDestinationDetailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DestinationDetails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	destinationDetailDBTypes = map[string]string{`ID`: `integer`, `DestinationID`: `integer`, `Photourl`: `text`}
	_                        = bytes.MinRead
)

func testDestinationDetailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(destinationDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(destinationDetailAllColumns) == len(destinationDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDestinationDetailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(destinationDetailAllColumns) == len(destinationDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DestinationDetail{}
	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, destinationDetailDBTypes, true, destinationDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(destinationDetailAllColumns, destinationDetailPrimaryKeyColumns) {
		fields = destinationDetailAllColumns
	} else {
		fields = strmangle.SetComplement(
			destinationDetailAllColumns,
			destinationDetailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DestinationDetailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDestinationDetailsUpsert(t *testing.T) {
	t.Parallel()

	if len(destinationDetailAllColumns) == len(destinationDetailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DestinationDetail{}
	if err = randomize.Struct(seed, &o, destinationDetailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DestinationDetail: %s", err)
	}

	count, err := DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, destinationDetailDBTypes, false, destinationDetailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DestinationDetail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DestinationDetail: %s", err)
	}

	count, err = DestinationDetails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
