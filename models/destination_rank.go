// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DestinationRank is an object representing the database table.
type DestinationRank struct {
	ID            int     `boil:"id" json:"id" toml:"id" yaml:"id"`
	DestinationID int     `boil:"destination_id" json:"destination_id" toml:"destination_id" yaml:"destination_id"`
	Vote          float64 `boil:"vote" json:"vote" toml:"vote" yaml:"vote"`
	TotalOfVote   int     `boil:"total_of_vote" json:"total_of_vote" toml:"total_of_vote" yaml:"total_of_vote"`

	R *destinationRankR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L destinationRankL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DestinationRankColumns = struct {
	ID            string
	DestinationID string
	Vote          string
	TotalOfVote   string
}{
	ID:            "id",
	DestinationID: "destination_id",
	Vote:          "vote",
	TotalOfVote:   "total_of_vote",
}

var DestinationRankTableColumns = struct {
	ID            string
	DestinationID string
	Vote          string
	TotalOfVote   string
}{
	ID:            "destination_rank.id",
	DestinationID: "destination_rank.destination_id",
	Vote:          "destination_rank.vote",
	TotalOfVote:   "destination_rank.total_of_vote",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DestinationRankWhere = struct {
	ID            whereHelperint
	DestinationID whereHelperint
	Vote          whereHelperfloat64
	TotalOfVote   whereHelperint
}{
	ID:            whereHelperint{field: "\"destination_rank\".\"id\""},
	DestinationID: whereHelperint{field: "\"destination_rank\".\"destination_id\""},
	Vote:          whereHelperfloat64{field: "\"destination_rank\".\"vote\""},
	TotalOfVote:   whereHelperint{field: "\"destination_rank\".\"total_of_vote\""},
}

// DestinationRankRels is where relationship names are stored.
var DestinationRankRels = struct {
	Destination string
}{
	Destination: "Destination",
}

// destinationRankR is where relationships are stored.
type destinationRankR struct {
	Destination *Destination `boil:"Destination" json:"Destination" toml:"Destination" yaml:"Destination"`
}

// NewStruct creates a new relationship struct
func (*destinationRankR) NewStruct() *destinationRankR {
	return &destinationRankR{}
}

// destinationRankL is where Load methods for each relationship are stored.
type destinationRankL struct{}

var (
	destinationRankAllColumns            = []string{"id", "destination_id", "vote", "total_of_vote"}
	destinationRankColumnsWithoutDefault = []string{}
	destinationRankColumnsWithDefault    = []string{"id", "destination_id", "vote", "total_of_vote"}
	destinationRankPrimaryKeyColumns     = []string{"id"}
)

type (
	// DestinationRankSlice is an alias for a slice of pointers to DestinationRank.
	// This should almost always be used instead of []DestinationRank.
	DestinationRankSlice []*DestinationRank
	// DestinationRankHook is the signature for custom DestinationRank hook methods
	DestinationRankHook func(context.Context, boil.ContextExecutor, *DestinationRank) error

	destinationRankQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	destinationRankType                 = reflect.TypeOf(&DestinationRank{})
	destinationRankMapping              = queries.MakeStructMapping(destinationRankType)
	destinationRankPrimaryKeyMapping, _ = queries.BindMapping(destinationRankType, destinationRankMapping, destinationRankPrimaryKeyColumns)
	destinationRankInsertCacheMut       sync.RWMutex
	destinationRankInsertCache          = make(map[string]insertCache)
	destinationRankUpdateCacheMut       sync.RWMutex
	destinationRankUpdateCache          = make(map[string]updateCache)
	destinationRankUpsertCacheMut       sync.RWMutex
	destinationRankUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var destinationRankBeforeInsertHooks []DestinationRankHook
var destinationRankBeforeUpdateHooks []DestinationRankHook
var destinationRankBeforeDeleteHooks []DestinationRankHook
var destinationRankBeforeUpsertHooks []DestinationRankHook

var destinationRankAfterInsertHooks []DestinationRankHook
var destinationRankAfterSelectHooks []DestinationRankHook
var destinationRankAfterUpdateHooks []DestinationRankHook
var destinationRankAfterDeleteHooks []DestinationRankHook
var destinationRankAfterUpsertHooks []DestinationRankHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DestinationRank) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationRankBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DestinationRank) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationRankBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DestinationRank) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationRankBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DestinationRank) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationRankBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DestinationRank) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationRankAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DestinationRank) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationRankAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DestinationRank) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationRankAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DestinationRank) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationRankAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DestinationRank) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationRankAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDestinationRankHook registers your hook function for all future operations.
func AddDestinationRankHook(hookPoint boil.HookPoint, destinationRankHook DestinationRankHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		destinationRankBeforeInsertHooks = append(destinationRankBeforeInsertHooks, destinationRankHook)
	case boil.BeforeUpdateHook:
		destinationRankBeforeUpdateHooks = append(destinationRankBeforeUpdateHooks, destinationRankHook)
	case boil.BeforeDeleteHook:
		destinationRankBeforeDeleteHooks = append(destinationRankBeforeDeleteHooks, destinationRankHook)
	case boil.BeforeUpsertHook:
		destinationRankBeforeUpsertHooks = append(destinationRankBeforeUpsertHooks, destinationRankHook)
	case boil.AfterInsertHook:
		destinationRankAfterInsertHooks = append(destinationRankAfterInsertHooks, destinationRankHook)
	case boil.AfterSelectHook:
		destinationRankAfterSelectHooks = append(destinationRankAfterSelectHooks, destinationRankHook)
	case boil.AfterUpdateHook:
		destinationRankAfterUpdateHooks = append(destinationRankAfterUpdateHooks, destinationRankHook)
	case boil.AfterDeleteHook:
		destinationRankAfterDeleteHooks = append(destinationRankAfterDeleteHooks, destinationRankHook)
	case boil.AfterUpsertHook:
		destinationRankAfterUpsertHooks = append(destinationRankAfterUpsertHooks, destinationRankHook)
	}
}

// One returns a single destinationRank record from the query.
func (q destinationRankQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DestinationRank, error) {
	o := &DestinationRank{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for destination_rank")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DestinationRank records from the query.
func (q destinationRankQuery) All(ctx context.Context, exec boil.ContextExecutor) (DestinationRankSlice, error) {
	var o []*DestinationRank

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DestinationRank slice")
	}

	if len(destinationRankAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DestinationRank records in the query.
func (q destinationRankQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count destination_rank rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q destinationRankQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if destination_rank exists")
	}

	return count > 0, nil
}

// Destination pointed to by the foreign key.
func (o *DestinationRank) Destination(mods ...qm.QueryMod) destinationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DestinationID),
	}

	queryMods = append(queryMods, mods...)

	query := Destinations(queryMods...)
	queries.SetFrom(query.Query, "\"destination\"")

	return query
}

// LoadDestination allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (destinationRankL) LoadDestination(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDestinationRank interface{}, mods queries.Applicator) error {
	var slice []*DestinationRank
	var object *DestinationRank

	if singular {
		object = maybeDestinationRank.(*DestinationRank)
	} else {
		slice = *maybeDestinationRank.(*[]*DestinationRank)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &destinationRankR{}
		}
		args = append(args, object.DestinationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &destinationRankR{}
			}

			for _, a := range args {
				if a == obj.DestinationID {
					continue Outer
				}
			}

			args = append(args, obj.DestinationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`destination`),
		qm.WhereIn(`destination.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Destination")
	}

	var resultSlice []*Destination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Destination")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for destination")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for destination")
	}

	if len(destinationRankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Destination = foreign
		if foreign.R == nil {
			foreign.R = &destinationR{}
		}
		foreign.R.DestinationRanks = append(foreign.R.DestinationRanks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DestinationID == foreign.ID {
				local.R.Destination = foreign
				if foreign.R == nil {
					foreign.R = &destinationR{}
				}
				foreign.R.DestinationRanks = append(foreign.R.DestinationRanks, local)
				break
			}
		}
	}

	return nil
}

// SetDestination of the destinationRank to the related item.
// Sets o.R.Destination to related.
// Adds o to related.R.DestinationRanks.
func (o *DestinationRank) SetDestination(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Destination) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"destination_rank\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"destination_id"}),
		strmangle.WhereClause("\"", "\"", 2, destinationRankPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DestinationID = related.ID
	if o.R == nil {
		o.R = &destinationRankR{
			Destination: related,
		}
	} else {
		o.R.Destination = related
	}

	if related.R == nil {
		related.R = &destinationR{
			DestinationRanks: DestinationRankSlice{o},
		}
	} else {
		related.R.DestinationRanks = append(related.R.DestinationRanks, o)
	}

	return nil
}

// DestinationRanks retrieves all the records using an executor.
func DestinationRanks(mods ...qm.QueryMod) destinationRankQuery {
	mods = append(mods, qm.From("\"destination_rank\""))
	return destinationRankQuery{NewQuery(mods...)}
}

// FindDestinationRank retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDestinationRank(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DestinationRank, error) {
	destinationRankObj := &DestinationRank{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"destination_rank\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, destinationRankObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from destination_rank")
	}

	if err = destinationRankObj.doAfterSelectHooks(ctx, exec); err != nil {
		return destinationRankObj, err
	}

	return destinationRankObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DestinationRank) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no destination_rank provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(destinationRankColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	destinationRankInsertCacheMut.RLock()
	cache, cached := destinationRankInsertCache[key]
	destinationRankInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			destinationRankAllColumns,
			destinationRankColumnsWithDefault,
			destinationRankColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(destinationRankType, destinationRankMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(destinationRankType, destinationRankMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"destination_rank\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"destination_rank\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into destination_rank")
	}

	if !cached {
		destinationRankInsertCacheMut.Lock()
		destinationRankInsertCache[key] = cache
		destinationRankInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DestinationRank.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DestinationRank) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	destinationRankUpdateCacheMut.RLock()
	cache, cached := destinationRankUpdateCache[key]
	destinationRankUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			destinationRankAllColumns,
			destinationRankPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update destination_rank, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"destination_rank\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, destinationRankPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(destinationRankType, destinationRankMapping, append(wl, destinationRankPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update destination_rank row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for destination_rank")
	}

	if !cached {
		destinationRankUpdateCacheMut.Lock()
		destinationRankUpdateCache[key] = cache
		destinationRankUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q destinationRankQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for destination_rank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for destination_rank")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DestinationRankSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), destinationRankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"destination_rank\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, destinationRankPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in destinationRank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all destinationRank")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DestinationRank) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no destination_rank provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(destinationRankColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	destinationRankUpsertCacheMut.RLock()
	cache, cached := destinationRankUpsertCache[key]
	destinationRankUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			destinationRankAllColumns,
			destinationRankColumnsWithDefault,
			destinationRankColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			destinationRankAllColumns,
			destinationRankPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert destination_rank, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(destinationRankPrimaryKeyColumns))
			copy(conflict, destinationRankPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"destination_rank\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(destinationRankType, destinationRankMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(destinationRankType, destinationRankMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert destination_rank")
	}

	if !cached {
		destinationRankUpsertCacheMut.Lock()
		destinationRankUpsertCache[key] = cache
		destinationRankUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DestinationRank record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DestinationRank) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DestinationRank provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), destinationRankPrimaryKeyMapping)
	sql := "DELETE FROM \"destination_rank\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from destination_rank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for destination_rank")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q destinationRankQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no destinationRankQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from destination_rank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for destination_rank")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DestinationRankSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(destinationRankBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), destinationRankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"destination_rank\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, destinationRankPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from destinationRank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for destination_rank")
	}

	if len(destinationRankAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DestinationRank) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDestinationRank(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DestinationRankSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DestinationRankSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), destinationRankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"destination_rank\".* FROM \"destination_rank\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, destinationRankPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DestinationRankSlice")
	}

	*o = slice

	return nil
}

// DestinationRankExists checks if the DestinationRank row exists.
func DestinationRankExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"destination_rank\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if destination_rank exists")
	}

	return exists, nil
}
