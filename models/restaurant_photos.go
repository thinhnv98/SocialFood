// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RestaurantPhoto is an object representing the database table.
type RestaurantPhoto struct {
	ID           int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	RestaurantID int         `boil:"restaurant_id" json:"restaurant_id" toml:"restaurant_id" yaml:"restaurant_id"`
	Photourl     null.String `boil:"photourl" json:"photourl,omitempty" toml:"photourl" yaml:"photourl,omitempty"`
	Description  null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedOn    null.String `boil:"created_on" json:"created_on,omitempty" toml:"created_on" yaml:"created_on,omitempty"`

	R *restaurantPhotoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L restaurantPhotoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RestaurantPhotoColumns = struct {
	ID           string
	RestaurantID string
	Photourl     string
	Description  string
	CreatedOn    string
}{
	ID:           "id",
	RestaurantID: "restaurant_id",
	Photourl:     "photourl",
	Description:  "description",
	CreatedOn:    "created_on",
}

var RestaurantPhotoTableColumns = struct {
	ID           string
	RestaurantID string
	Photourl     string
	Description  string
	CreatedOn    string
}{
	ID:           "restaurant_photos.id",
	RestaurantID: "restaurant_photos.restaurant_id",
	Photourl:     "restaurant_photos.photourl",
	Description:  "restaurant_photos.description",
	CreatedOn:    "restaurant_photos.created_on",
}

// Generated where

var RestaurantPhotoWhere = struct {
	ID           whereHelperint
	RestaurantID whereHelperint
	Photourl     whereHelpernull_String
	Description  whereHelpernull_String
	CreatedOn    whereHelpernull_String
}{
	ID:           whereHelperint{field: "\"restaurant_photos\".\"id\""},
	RestaurantID: whereHelperint{field: "\"restaurant_photos\".\"restaurant_id\""},
	Photourl:     whereHelpernull_String{field: "\"restaurant_photos\".\"photourl\""},
	Description:  whereHelpernull_String{field: "\"restaurant_photos\".\"description\""},
	CreatedOn:    whereHelpernull_String{field: "\"restaurant_photos\".\"created_on\""},
}

// RestaurantPhotoRels is where relationship names are stored.
var RestaurantPhotoRels = struct {
	Restaurant string
}{
	Restaurant: "Restaurant",
}

// restaurantPhotoR is where relationships are stored.
type restaurantPhotoR struct {
	Restaurant *Restaurant `boil:"Restaurant" json:"Restaurant" toml:"Restaurant" yaml:"Restaurant"`
}

// NewStruct creates a new relationship struct
func (*restaurantPhotoR) NewStruct() *restaurantPhotoR {
	return &restaurantPhotoR{}
}

// restaurantPhotoL is where Load methods for each relationship are stored.
type restaurantPhotoL struct{}

var (
	restaurantPhotoAllColumns            = []string{"id", "restaurant_id", "photourl", "description", "created_on"}
	restaurantPhotoColumnsWithoutDefault = []string{"restaurant_id", "photourl", "description", "created_on"}
	restaurantPhotoColumnsWithDefault    = []string{"id"}
	restaurantPhotoPrimaryKeyColumns     = []string{"id"}
)

type (
	// RestaurantPhotoSlice is an alias for a slice of pointers to RestaurantPhoto.
	// This should almost always be used instead of []RestaurantPhoto.
	RestaurantPhotoSlice []*RestaurantPhoto
	// RestaurantPhotoHook is the signature for custom RestaurantPhoto hook methods
	RestaurantPhotoHook func(context.Context, boil.ContextExecutor, *RestaurantPhoto) error

	restaurantPhotoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	restaurantPhotoType                 = reflect.TypeOf(&RestaurantPhoto{})
	restaurantPhotoMapping              = queries.MakeStructMapping(restaurantPhotoType)
	restaurantPhotoPrimaryKeyMapping, _ = queries.BindMapping(restaurantPhotoType, restaurantPhotoMapping, restaurantPhotoPrimaryKeyColumns)
	restaurantPhotoInsertCacheMut       sync.RWMutex
	restaurantPhotoInsertCache          = make(map[string]insertCache)
	restaurantPhotoUpdateCacheMut       sync.RWMutex
	restaurantPhotoUpdateCache          = make(map[string]updateCache)
	restaurantPhotoUpsertCacheMut       sync.RWMutex
	restaurantPhotoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var restaurantPhotoBeforeInsertHooks []RestaurantPhotoHook
var restaurantPhotoBeforeUpdateHooks []RestaurantPhotoHook
var restaurantPhotoBeforeDeleteHooks []RestaurantPhotoHook
var restaurantPhotoBeforeUpsertHooks []RestaurantPhotoHook

var restaurantPhotoAfterInsertHooks []RestaurantPhotoHook
var restaurantPhotoAfterSelectHooks []RestaurantPhotoHook
var restaurantPhotoAfterUpdateHooks []RestaurantPhotoHook
var restaurantPhotoAfterDeleteHooks []RestaurantPhotoHook
var restaurantPhotoAfterUpsertHooks []RestaurantPhotoHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RestaurantPhoto) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantPhotoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RestaurantPhoto) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantPhotoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RestaurantPhoto) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantPhotoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RestaurantPhoto) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantPhotoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RestaurantPhoto) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantPhotoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RestaurantPhoto) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantPhotoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RestaurantPhoto) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantPhotoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RestaurantPhoto) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantPhotoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RestaurantPhoto) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantPhotoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRestaurantPhotoHook registers your hook function for all future operations.
func AddRestaurantPhotoHook(hookPoint boil.HookPoint, restaurantPhotoHook RestaurantPhotoHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		restaurantPhotoBeforeInsertHooks = append(restaurantPhotoBeforeInsertHooks, restaurantPhotoHook)
	case boil.BeforeUpdateHook:
		restaurantPhotoBeforeUpdateHooks = append(restaurantPhotoBeforeUpdateHooks, restaurantPhotoHook)
	case boil.BeforeDeleteHook:
		restaurantPhotoBeforeDeleteHooks = append(restaurantPhotoBeforeDeleteHooks, restaurantPhotoHook)
	case boil.BeforeUpsertHook:
		restaurantPhotoBeforeUpsertHooks = append(restaurantPhotoBeforeUpsertHooks, restaurantPhotoHook)
	case boil.AfterInsertHook:
		restaurantPhotoAfterInsertHooks = append(restaurantPhotoAfterInsertHooks, restaurantPhotoHook)
	case boil.AfterSelectHook:
		restaurantPhotoAfterSelectHooks = append(restaurantPhotoAfterSelectHooks, restaurantPhotoHook)
	case boil.AfterUpdateHook:
		restaurantPhotoAfterUpdateHooks = append(restaurantPhotoAfterUpdateHooks, restaurantPhotoHook)
	case boil.AfterDeleteHook:
		restaurantPhotoAfterDeleteHooks = append(restaurantPhotoAfterDeleteHooks, restaurantPhotoHook)
	case boil.AfterUpsertHook:
		restaurantPhotoAfterUpsertHooks = append(restaurantPhotoAfterUpsertHooks, restaurantPhotoHook)
	}
}

// One returns a single restaurantPhoto record from the query.
func (q restaurantPhotoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RestaurantPhoto, error) {
	o := &RestaurantPhoto{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for restaurant_photos")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RestaurantPhoto records from the query.
func (q restaurantPhotoQuery) All(ctx context.Context, exec boil.ContextExecutor) (RestaurantPhotoSlice, error) {
	var o []*RestaurantPhoto

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RestaurantPhoto slice")
	}

	if len(restaurantPhotoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RestaurantPhoto records in the query.
func (q restaurantPhotoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count restaurant_photos rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q restaurantPhotoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if restaurant_photos exists")
	}

	return count > 0, nil
}

// Restaurant pointed to by the foreign key.
func (o *RestaurantPhoto) Restaurant(mods ...qm.QueryMod) restaurantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RestaurantID),
	}

	queryMods = append(queryMods, mods...)

	query := Restaurants(queryMods...)
	queries.SetFrom(query.Query, "\"restaurant\"")

	return query
}

// LoadRestaurant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (restaurantPhotoL) LoadRestaurant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurantPhoto interface{}, mods queries.Applicator) error {
	var slice []*RestaurantPhoto
	var object *RestaurantPhoto

	if singular {
		object = maybeRestaurantPhoto.(*RestaurantPhoto)
	} else {
		slice = *maybeRestaurantPhoto.(*[]*RestaurantPhoto)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantPhotoR{}
		}
		args = append(args, object.RestaurantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantPhotoR{}
			}

			for _, a := range args {
				if a == obj.RestaurantID {
					continue Outer
				}
			}

			args = append(args, obj.RestaurantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`restaurant`),
		qm.WhereIn(`restaurant.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Restaurant")
	}

	var resultSlice []*Restaurant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Restaurant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for restaurant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for restaurant")
	}

	if len(restaurantPhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Restaurant = foreign
		if foreign.R == nil {
			foreign.R = &restaurantR{}
		}
		foreign.R.RestaurantPhotos = append(foreign.R.RestaurantPhotos, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RestaurantID == foreign.ID {
				local.R.Restaurant = foreign
				if foreign.R == nil {
					foreign.R = &restaurantR{}
				}
				foreign.R.RestaurantPhotos = append(foreign.R.RestaurantPhotos, local)
				break
			}
		}
	}

	return nil
}

// SetRestaurant of the restaurantPhoto to the related item.
// Sets o.R.Restaurant to related.
// Adds o to related.R.RestaurantPhotos.
func (o *RestaurantPhoto) SetRestaurant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Restaurant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"restaurant_photos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"restaurant_id"}),
		strmangle.WhereClause("\"", "\"", 2, restaurantPhotoPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RestaurantID = related.ID
	if o.R == nil {
		o.R = &restaurantPhotoR{
			Restaurant: related,
		}
	} else {
		o.R.Restaurant = related
	}

	if related.R == nil {
		related.R = &restaurantR{
			RestaurantPhotos: RestaurantPhotoSlice{o},
		}
	} else {
		related.R.RestaurantPhotos = append(related.R.RestaurantPhotos, o)
	}

	return nil
}

// RestaurantPhotos retrieves all the records using an executor.
func RestaurantPhotos(mods ...qm.QueryMod) restaurantPhotoQuery {
	mods = append(mods, qm.From("\"restaurant_photos\""))
	return restaurantPhotoQuery{NewQuery(mods...)}
}

// FindRestaurantPhoto retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRestaurantPhoto(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RestaurantPhoto, error) {
	restaurantPhotoObj := &RestaurantPhoto{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"restaurant_photos\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, restaurantPhotoObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from restaurant_photos")
	}

	if err = restaurantPhotoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return restaurantPhotoObj, err
	}

	return restaurantPhotoObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RestaurantPhoto) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no restaurant_photos provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantPhotoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	restaurantPhotoInsertCacheMut.RLock()
	cache, cached := restaurantPhotoInsertCache[key]
	restaurantPhotoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			restaurantPhotoAllColumns,
			restaurantPhotoColumnsWithDefault,
			restaurantPhotoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(restaurantPhotoType, restaurantPhotoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(restaurantPhotoType, restaurantPhotoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"restaurant_photos\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"restaurant_photos\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into restaurant_photos")
	}

	if !cached {
		restaurantPhotoInsertCacheMut.Lock()
		restaurantPhotoInsertCache[key] = cache
		restaurantPhotoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RestaurantPhoto.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RestaurantPhoto) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	restaurantPhotoUpdateCacheMut.RLock()
	cache, cached := restaurantPhotoUpdateCache[key]
	restaurantPhotoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			restaurantPhotoAllColumns,
			restaurantPhotoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update restaurant_photos, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"restaurant_photos\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, restaurantPhotoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(restaurantPhotoType, restaurantPhotoMapping, append(wl, restaurantPhotoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update restaurant_photos row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for restaurant_photos")
	}

	if !cached {
		restaurantPhotoUpdateCacheMut.Lock()
		restaurantPhotoUpdateCache[key] = cache
		restaurantPhotoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q restaurantPhotoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for restaurant_photos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for restaurant_photos")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RestaurantPhotoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"restaurant_photos\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, restaurantPhotoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in restaurantPhoto slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all restaurantPhoto")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RestaurantPhoto) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no restaurant_photos provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantPhotoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	restaurantPhotoUpsertCacheMut.RLock()
	cache, cached := restaurantPhotoUpsertCache[key]
	restaurantPhotoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			restaurantPhotoAllColumns,
			restaurantPhotoColumnsWithDefault,
			restaurantPhotoColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			restaurantPhotoAllColumns,
			restaurantPhotoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert restaurant_photos, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(restaurantPhotoPrimaryKeyColumns))
			copy(conflict, restaurantPhotoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"restaurant_photos\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(restaurantPhotoType, restaurantPhotoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(restaurantPhotoType, restaurantPhotoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert restaurant_photos")
	}

	if !cached {
		restaurantPhotoUpsertCacheMut.Lock()
		restaurantPhotoUpsertCache[key] = cache
		restaurantPhotoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RestaurantPhoto record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RestaurantPhoto) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RestaurantPhoto provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), restaurantPhotoPrimaryKeyMapping)
	sql := "DELETE FROM \"restaurant_photos\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from restaurant_photos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for restaurant_photos")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q restaurantPhotoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no restaurantPhotoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from restaurant_photos")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for restaurant_photos")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RestaurantPhotoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(restaurantPhotoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"restaurant_photos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restaurantPhotoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from restaurantPhoto slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for restaurant_photos")
	}

	if len(restaurantPhotoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RestaurantPhoto) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRestaurantPhoto(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestaurantPhotoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RestaurantPhotoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantPhotoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"restaurant_photos\".* FROM \"restaurant_photos\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restaurantPhotoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RestaurantPhotoSlice")
	}

	*o = slice

	return nil
}

// RestaurantPhotoExists checks if the RestaurantPhoto row exists.
func RestaurantPhotoExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"restaurant_photos\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if restaurant_photos exists")
	}

	return exists, nil
}
