// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Restaurant is an object representing the database table.
type Restaurant struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Imagename   null.String `boil:"imagename" json:"imageName,omitempty" toml:"imagename" yaml:"imagename,omitempty"`
	City        null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`
	Country     null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedBy   null.Int    `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`

	R *restaurantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L restaurantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RestaurantColumns = struct {
	ID          string
	Name        string
	Imagename   string
	City        string
	Country     string
	Description string
	CreatedBy   string
}{
	ID:          "id",
	Name:        "name",
	Imagename:   "imagename",
	City:        "city",
	Country:     "country",
	Description: "description",
	CreatedBy:   "created_by",
}

var RestaurantTableColumns = struct {
	ID          string
	Name        string
	Imagename   string
	City        string
	Country     string
	Description string
	CreatedBy   string
}{
	ID:          "restaurant.id",
	Name:        "restaurant.name",
	Imagename:   "restaurant.imagename",
	City:        "restaurant.city",
	Country:     "restaurant.country",
	Description: "restaurant.description",
	CreatedBy:   "restaurant.created_by",
}

// Generated where

var RestaurantWhere = struct {
	ID          whereHelperint
	Name        whereHelpernull_String
	Imagename   whereHelpernull_String
	City        whereHelpernull_String
	Country     whereHelpernull_String
	Description whereHelpernull_String
	CreatedBy   whereHelpernull_Int
}{
	ID:          whereHelperint{field: "\"restaurant\".\"id\""},
	Name:        whereHelpernull_String{field: "\"restaurant\".\"name\""},
	Imagename:   whereHelpernull_String{field: "\"restaurant\".\"imagename\""},
	City:        whereHelpernull_String{field: "\"restaurant\".\"city\""},
	Country:     whereHelpernull_String{field: "\"restaurant\".\"country\""},
	Description: whereHelpernull_String{field: "\"restaurant\".\"description\""},
	CreatedBy:   whereHelpernull_Int{field: "\"restaurant\".\"created_by\""},
}

// RestaurantRels is where relationship names are stored.
var RestaurantRels = struct {
	CreatedByAccount  string
	RestaurantDishes  string
	RestaurantPhotos  string
	RestaurantRanks   string
	RestaurantReviews string
}{
	CreatedByAccount:  "CreatedByAccount",
	RestaurantDishes:  "RestaurantDishes",
	RestaurantPhotos:  "RestaurantPhotos",
	RestaurantRanks:   "RestaurantRanks",
	RestaurantReviews: "RestaurantReviews",
}

// restaurantR is where relationships are stored.
type restaurantR struct {
	CreatedByAccount  *Account              `boil:"CreatedByAccount" json:"CreatedByAccount" toml:"CreatedByAccount" yaml:"CreatedByAccount"`
	RestaurantDishes  RestaurantDishSlice   `boil:"RestaurantDishes" json:"RestaurantDishes" toml:"RestaurantDishes" yaml:"RestaurantDishes"`
	RestaurantPhotos  RestaurantPhotoSlice  `boil:"RestaurantPhotos" json:"RestaurantPhotos" toml:"RestaurantPhotos" yaml:"RestaurantPhotos"`
	RestaurantRanks   RestaurantRankSlice   `boil:"RestaurantRanks" json:"RestaurantRanks" toml:"RestaurantRanks" yaml:"RestaurantRanks"`
	RestaurantReviews RestaurantReviewSlice `boil:"RestaurantReviews" json:"RestaurantReviews" toml:"RestaurantReviews" yaml:"RestaurantReviews"`
}

// NewStruct creates a new relationship struct
func (*restaurantR) NewStruct() *restaurantR {
	return &restaurantR{}
}

// restaurantL is where Load methods for each relationship are stored.
type restaurantL struct{}

var (
	restaurantAllColumns            = []string{"id", "name", "imagename", "city", "country", "description", "created_by"}
	restaurantColumnsWithoutDefault = []string{"name", "imagename", "city", "country", "description", "created_by"}
	restaurantColumnsWithDefault    = []string{"id"}
	restaurantPrimaryKeyColumns     = []string{"id"}
)

type (
	// RestaurantSlice is an alias for a slice of pointers to Restaurant.
	// This should almost always be used instead of []Restaurant.
	RestaurantSlice []*Restaurant
	// RestaurantHook is the signature for custom Restaurant hook methods
	RestaurantHook func(context.Context, boil.ContextExecutor, *Restaurant) error

	restaurantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	restaurantType                 = reflect.TypeOf(&Restaurant{})
	restaurantMapping              = queries.MakeStructMapping(restaurantType)
	restaurantPrimaryKeyMapping, _ = queries.BindMapping(restaurantType, restaurantMapping, restaurantPrimaryKeyColumns)
	restaurantInsertCacheMut       sync.RWMutex
	restaurantInsertCache          = make(map[string]insertCache)
	restaurantUpdateCacheMut       sync.RWMutex
	restaurantUpdateCache          = make(map[string]updateCache)
	restaurantUpsertCacheMut       sync.RWMutex
	restaurantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var restaurantBeforeInsertHooks []RestaurantHook
var restaurantBeforeUpdateHooks []RestaurantHook
var restaurantBeforeDeleteHooks []RestaurantHook
var restaurantBeforeUpsertHooks []RestaurantHook

var restaurantAfterInsertHooks []RestaurantHook
var restaurantAfterSelectHooks []RestaurantHook
var restaurantAfterUpdateHooks []RestaurantHook
var restaurantAfterDeleteHooks []RestaurantHook
var restaurantAfterUpsertHooks []RestaurantHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Restaurant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Restaurant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Restaurant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Restaurant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Restaurant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Restaurant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Restaurant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Restaurant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Restaurant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRestaurantHook registers your hook function for all future operations.
func AddRestaurantHook(hookPoint boil.HookPoint, restaurantHook RestaurantHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		restaurantBeforeInsertHooks = append(restaurantBeforeInsertHooks, restaurantHook)
	case boil.BeforeUpdateHook:
		restaurantBeforeUpdateHooks = append(restaurantBeforeUpdateHooks, restaurantHook)
	case boil.BeforeDeleteHook:
		restaurantBeforeDeleteHooks = append(restaurantBeforeDeleteHooks, restaurantHook)
	case boil.BeforeUpsertHook:
		restaurantBeforeUpsertHooks = append(restaurantBeforeUpsertHooks, restaurantHook)
	case boil.AfterInsertHook:
		restaurantAfterInsertHooks = append(restaurantAfterInsertHooks, restaurantHook)
	case boil.AfterSelectHook:
		restaurantAfterSelectHooks = append(restaurantAfterSelectHooks, restaurantHook)
	case boil.AfterUpdateHook:
		restaurantAfterUpdateHooks = append(restaurantAfterUpdateHooks, restaurantHook)
	case boil.AfterDeleteHook:
		restaurantAfterDeleteHooks = append(restaurantAfterDeleteHooks, restaurantHook)
	case boil.AfterUpsertHook:
		restaurantAfterUpsertHooks = append(restaurantAfterUpsertHooks, restaurantHook)
	}
}

// One returns a single restaurant record from the query.
func (q restaurantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Restaurant, error) {
	o := &Restaurant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for restaurant")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Restaurant records from the query.
func (q restaurantQuery) All(ctx context.Context, exec boil.ContextExecutor) (RestaurantSlice, error) {
	var o []*Restaurant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Restaurant slice")
	}

	if len(restaurantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Restaurant records in the query.
func (q restaurantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count restaurant rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q restaurantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if restaurant exists")
	}

	return count > 0, nil
}

// CreatedByAccount pointed to by the foreign key.
func (o *Restaurant) CreatedByAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// RestaurantDishes retrieves all the restaurant_dish's RestaurantDishes with an executor.
func (o *Restaurant) RestaurantDishes(mods ...qm.QueryMod) restaurantDishQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"restaurant_dishes\".\"restaurant_id\"=?", o.ID),
	)

	query := RestaurantDishes(queryMods...)
	queries.SetFrom(query.Query, "\"restaurant_dishes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"restaurant_dishes\".*"})
	}

	return query
}

// RestaurantPhotos retrieves all the restaurant_photo's RestaurantPhotos with an executor.
func (o *Restaurant) RestaurantPhotos(mods ...qm.QueryMod) restaurantPhotoQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"restaurant_photos\".\"restaurant_id\"=?", o.ID),
	)

	query := RestaurantPhotos(queryMods...)
	queries.SetFrom(query.Query, "\"restaurant_photos\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"restaurant_photos\".*"})
	}

	return query
}

// RestaurantRanks retrieves all the restaurant_rank's RestaurantRanks with an executor.
func (o *Restaurant) RestaurantRanks(mods ...qm.QueryMod) restaurantRankQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"restaurant_rank\".\"restaurant_id\"=?", o.ID),
	)

	query := RestaurantRanks(queryMods...)
	queries.SetFrom(query.Query, "\"restaurant_rank\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"restaurant_rank\".*"})
	}

	return query
}

// RestaurantReviews retrieves all the restaurant_review's RestaurantReviews with an executor.
func (o *Restaurant) RestaurantReviews(mods ...qm.QueryMod) restaurantReviewQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"restaurant_reviews\".\"restaurant_id\"=?", o.ID),
	)

	query := RestaurantReviews(queryMods...)
	queries.SetFrom(query.Query, "\"restaurant_reviews\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"restaurant_reviews\".*"})
	}

	return query
}

// LoadCreatedByAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (restaurantL) LoadCreatedByAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurant interface{}, mods queries.Applicator) error {
	var slice []*Restaurant
	var object *Restaurant

	if singular {
		object = maybeRestaurant.(*Restaurant)
	} else {
		slice = *maybeRestaurant.(*[]*Restaurant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantR{}
		}
		if !queries.IsNil(object.CreatedBy) {
			args = append(args, object.CreatedBy)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatedBy) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatedBy) {
				args = append(args, obj.CreatedBy)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(restaurantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.CreatedByRestaurants = append(foreign.R.CreatedByRestaurants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedBy, foreign.ID) {
				local.R.CreatedByAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.CreatedByRestaurants = append(foreign.R.CreatedByRestaurants, local)
				break
			}
		}
	}

	return nil
}

// LoadRestaurantDishes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (restaurantL) LoadRestaurantDishes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurant interface{}, mods queries.Applicator) error {
	var slice []*Restaurant
	var object *Restaurant

	if singular {
		object = maybeRestaurant.(*Restaurant)
	} else {
		slice = *maybeRestaurant.(*[]*Restaurant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`restaurant_dishes`),
		qm.WhereIn(`restaurant_dishes.restaurant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load restaurant_dishes")
	}

	var resultSlice []*RestaurantDish
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice restaurant_dishes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on restaurant_dishes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for restaurant_dishes")
	}

	if len(restaurantDishAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RestaurantDishes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &restaurantDishR{}
			}
			foreign.R.Restaurant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RestaurantID {
				local.R.RestaurantDishes = append(local.R.RestaurantDishes, foreign)
				if foreign.R == nil {
					foreign.R = &restaurantDishR{}
				}
				foreign.R.Restaurant = local
				break
			}
		}
	}

	return nil
}

// LoadRestaurantPhotos allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (restaurantL) LoadRestaurantPhotos(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurant interface{}, mods queries.Applicator) error {
	var slice []*Restaurant
	var object *Restaurant

	if singular {
		object = maybeRestaurant.(*Restaurant)
	} else {
		slice = *maybeRestaurant.(*[]*Restaurant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`restaurant_photos`),
		qm.WhereIn(`restaurant_photos.restaurant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load restaurant_photos")
	}

	var resultSlice []*RestaurantPhoto
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice restaurant_photos")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on restaurant_photos")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for restaurant_photos")
	}

	if len(restaurantPhotoAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RestaurantPhotos = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &restaurantPhotoR{}
			}
			foreign.R.Restaurant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RestaurantID {
				local.R.RestaurantPhotos = append(local.R.RestaurantPhotos, foreign)
				if foreign.R == nil {
					foreign.R = &restaurantPhotoR{}
				}
				foreign.R.Restaurant = local
				break
			}
		}
	}

	return nil
}

// LoadRestaurantRanks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (restaurantL) LoadRestaurantRanks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurant interface{}, mods queries.Applicator) error {
	var slice []*Restaurant
	var object *Restaurant

	if singular {
		object = maybeRestaurant.(*Restaurant)
	} else {
		slice = *maybeRestaurant.(*[]*Restaurant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`restaurant_rank`),
		qm.WhereIn(`restaurant_rank.restaurant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load restaurant_rank")
	}

	var resultSlice []*RestaurantRank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice restaurant_rank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on restaurant_rank")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for restaurant_rank")
	}

	if len(restaurantRankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RestaurantRanks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &restaurantRankR{}
			}
			foreign.R.Restaurant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RestaurantID {
				local.R.RestaurantRanks = append(local.R.RestaurantRanks, foreign)
				if foreign.R == nil {
					foreign.R = &restaurantRankR{}
				}
				foreign.R.Restaurant = local
				break
			}
		}
	}

	return nil
}

// LoadRestaurantReviews allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (restaurantL) LoadRestaurantReviews(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurant interface{}, mods queries.Applicator) error {
	var slice []*Restaurant
	var object *Restaurant

	if singular {
		object = maybeRestaurant.(*Restaurant)
	} else {
		slice = *maybeRestaurant.(*[]*Restaurant)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`restaurant_reviews`),
		qm.WhereIn(`restaurant_reviews.restaurant_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load restaurant_reviews")
	}

	var resultSlice []*RestaurantReview
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice restaurant_reviews")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on restaurant_reviews")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for restaurant_reviews")
	}

	if len(restaurantReviewAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RestaurantReviews = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &restaurantReviewR{}
			}
			foreign.R.Restaurant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RestaurantID {
				local.R.RestaurantReviews = append(local.R.RestaurantReviews, foreign)
				if foreign.R == nil {
					foreign.R = &restaurantReviewR{}
				}
				foreign.R.Restaurant = local
				break
			}
		}
	}

	return nil
}

// SetCreatedByAccount of the restaurant to the related item.
// Sets o.R.CreatedByAccount to related.
// Adds o to related.R.CreatedByRestaurants.
func (o *Restaurant) SetCreatedByAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"restaurant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, restaurantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedBy, related.ID)
	if o.R == nil {
		o.R = &restaurantR{
			CreatedByAccount: related,
		}
	} else {
		o.R.CreatedByAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			CreatedByRestaurants: RestaurantSlice{o},
		}
	} else {
		related.R.CreatedByRestaurants = append(related.R.CreatedByRestaurants, o)
	}

	return nil
}

// RemoveCreatedByAccount relationship.
// Sets o.R.CreatedByAccount to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Restaurant) RemoveCreatedByAccount(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.CreatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedByAccount = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByRestaurants {
		if queries.Equal(o.CreatedBy, ri.CreatedBy) {
			continue
		}

		ln := len(related.R.CreatedByRestaurants)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByRestaurants[i] = related.R.CreatedByRestaurants[ln-1]
		}
		related.R.CreatedByRestaurants = related.R.CreatedByRestaurants[:ln-1]
		break
	}
	return nil
}

// AddRestaurantDishes adds the given related objects to the existing relationships
// of the restaurant, optionally inserting them as new records.
// Appends related to o.R.RestaurantDishes.
// Sets related.R.Restaurant appropriately.
func (o *Restaurant) AddRestaurantDishes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RestaurantDish) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RestaurantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"restaurant_dishes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"restaurant_id"}),
				strmangle.WhereClause("\"", "\"", 2, restaurantDishPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RestaurantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &restaurantR{
			RestaurantDishes: related,
		}
	} else {
		o.R.RestaurantDishes = append(o.R.RestaurantDishes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &restaurantDishR{
				Restaurant: o,
			}
		} else {
			rel.R.Restaurant = o
		}
	}
	return nil
}

// AddRestaurantPhotos adds the given related objects to the existing relationships
// of the restaurant, optionally inserting them as new records.
// Appends related to o.R.RestaurantPhotos.
// Sets related.R.Restaurant appropriately.
func (o *Restaurant) AddRestaurantPhotos(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RestaurantPhoto) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RestaurantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"restaurant_photos\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"restaurant_id"}),
				strmangle.WhereClause("\"", "\"", 2, restaurantPhotoPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RestaurantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &restaurantR{
			RestaurantPhotos: related,
		}
	} else {
		o.R.RestaurantPhotos = append(o.R.RestaurantPhotos, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &restaurantPhotoR{
				Restaurant: o,
			}
		} else {
			rel.R.Restaurant = o
		}
	}
	return nil
}

// AddRestaurantRanks adds the given related objects to the existing relationships
// of the restaurant, optionally inserting them as new records.
// Appends related to o.R.RestaurantRanks.
// Sets related.R.Restaurant appropriately.
func (o *Restaurant) AddRestaurantRanks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RestaurantRank) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RestaurantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"restaurant_rank\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"restaurant_id"}),
				strmangle.WhereClause("\"", "\"", 2, restaurantRankPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RestaurantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &restaurantR{
			RestaurantRanks: related,
		}
	} else {
		o.R.RestaurantRanks = append(o.R.RestaurantRanks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &restaurantRankR{
				Restaurant: o,
			}
		} else {
			rel.R.Restaurant = o
		}
	}
	return nil
}

// AddRestaurantReviews adds the given related objects to the existing relationships
// of the restaurant, optionally inserting them as new records.
// Appends related to o.R.RestaurantReviews.
// Sets related.R.Restaurant appropriately.
func (o *Restaurant) AddRestaurantReviews(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RestaurantReview) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RestaurantID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"restaurant_reviews\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"restaurant_id"}),
				strmangle.WhereClause("\"", "\"", 2, restaurantReviewPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RestaurantID = o.ID
		}
	}

	if o.R == nil {
		o.R = &restaurantR{
			RestaurantReviews: related,
		}
	} else {
		o.R.RestaurantReviews = append(o.R.RestaurantReviews, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &restaurantReviewR{
				Restaurant: o,
			}
		} else {
			rel.R.Restaurant = o
		}
	}
	return nil
}

// Restaurants retrieves all the records using an executor.
func Restaurants(mods ...qm.QueryMod) restaurantQuery {
	mods = append(mods, qm.From("\"restaurant\""))
	return restaurantQuery{NewQuery(mods...)}
}

// FindRestaurant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRestaurant(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Restaurant, error) {
	restaurantObj := &Restaurant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"restaurant\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, restaurantObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from restaurant")
	}

	if err = restaurantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return restaurantObj, err
	}

	return restaurantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Restaurant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no restaurant provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	restaurantInsertCacheMut.RLock()
	cache, cached := restaurantInsertCache[key]
	restaurantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			restaurantAllColumns,
			restaurantColumnsWithDefault,
			restaurantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(restaurantType, restaurantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(restaurantType, restaurantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"restaurant\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"restaurant\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into restaurant")
	}

	if !cached {
		restaurantInsertCacheMut.Lock()
		restaurantInsertCache[key] = cache
		restaurantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Restaurant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Restaurant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	restaurantUpdateCacheMut.RLock()
	cache, cached := restaurantUpdateCache[key]
	restaurantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			restaurantAllColumns,
			restaurantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update restaurant, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"restaurant\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, restaurantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(restaurantType, restaurantMapping, append(wl, restaurantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update restaurant row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for restaurant")
	}

	if !cached {
		restaurantUpdateCacheMut.Lock()
		restaurantUpdateCache[key] = cache
		restaurantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q restaurantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for restaurant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for restaurant")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RestaurantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"restaurant\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, restaurantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in restaurant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all restaurant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Restaurant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no restaurant provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	restaurantUpsertCacheMut.RLock()
	cache, cached := restaurantUpsertCache[key]
	restaurantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			restaurantAllColumns,
			restaurantColumnsWithDefault,
			restaurantColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			restaurantAllColumns,
			restaurantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert restaurant, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(restaurantPrimaryKeyColumns))
			copy(conflict, restaurantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"restaurant\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(restaurantType, restaurantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(restaurantType, restaurantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert restaurant")
	}

	if !cached {
		restaurantUpsertCacheMut.Lock()
		restaurantUpsertCache[key] = cache
		restaurantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Restaurant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Restaurant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Restaurant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), restaurantPrimaryKeyMapping)
	sql := "DELETE FROM \"restaurant\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from restaurant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for restaurant")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q restaurantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no restaurantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from restaurant")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for restaurant")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RestaurantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(restaurantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"restaurant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restaurantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from restaurant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for restaurant")
	}

	if len(restaurantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Restaurant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRestaurant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestaurantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RestaurantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"restaurant\".* FROM \"restaurant\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restaurantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RestaurantSlice")
	}

	*o = slice

	return nil
}

// RestaurantExists checks if the Restaurant row exists.
func RestaurantExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"restaurant\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if restaurant exists")
	}

	return exists, nil
}
