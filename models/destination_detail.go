// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DestinationDetail is an object representing the database table.
type DestinationDetail struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	DestinationID null.Int    `boil:"destination_id" json:"destination_id,omitempty" toml:"destination_id" yaml:"destination_id,omitempty"`
	Photourl      null.String `boil:"photourl" json:"photourl,omitempty" toml:"photourl" yaml:"photourl,omitempty"`

	R *destinationDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L destinationDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DestinationDetailColumns = struct {
	ID            string
	DestinationID string
	Photourl      string
}{
	ID:            "id",
	DestinationID: "destination_id",
	Photourl:      "photourl",
}

var DestinationDetailTableColumns = struct {
	ID            string
	DestinationID string
	Photourl      string
}{
	ID:            "destination_detail.id",
	DestinationID: "destination_detail.destination_id",
	Photourl:      "destination_detail.photourl",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DestinationDetailWhere = struct {
	ID            whereHelperint
	DestinationID whereHelpernull_Int
	Photourl      whereHelpernull_String
}{
	ID:            whereHelperint{field: "\"destination_detail\".\"id\""},
	DestinationID: whereHelpernull_Int{field: "\"destination_detail\".\"destination_id\""},
	Photourl:      whereHelpernull_String{field: "\"destination_detail\".\"photourl\""},
}

// DestinationDetailRels is where relationship names are stored.
var DestinationDetailRels = struct {
	Destination string
}{
	Destination: "Destination",
}

// destinationDetailR is where relationships are stored.
type destinationDetailR struct {
	Destination *Destination `boil:"Destination" json:"Destination" toml:"Destination" yaml:"Destination"`
}

// NewStruct creates a new relationship struct
func (*destinationDetailR) NewStruct() *destinationDetailR {
	return &destinationDetailR{}
}

// destinationDetailL is where Load methods for each relationship are stored.
type destinationDetailL struct{}

var (
	destinationDetailAllColumns            = []string{"id", "destination_id", "photourl"}
	destinationDetailColumnsWithoutDefault = []string{"destination_id", "photourl"}
	destinationDetailColumnsWithDefault    = []string{"id"}
	destinationDetailPrimaryKeyColumns     = []string{"id"}
)

type (
	// DestinationDetailSlice is an alias for a slice of pointers to DestinationDetail.
	// This should almost always be used instead of []DestinationDetail.
	DestinationDetailSlice []*DestinationDetail
	// DestinationDetailHook is the signature for custom DestinationDetail hook methods
	DestinationDetailHook func(context.Context, boil.ContextExecutor, *DestinationDetail) error

	destinationDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	destinationDetailType                 = reflect.TypeOf(&DestinationDetail{})
	destinationDetailMapping              = queries.MakeStructMapping(destinationDetailType)
	destinationDetailPrimaryKeyMapping, _ = queries.BindMapping(destinationDetailType, destinationDetailMapping, destinationDetailPrimaryKeyColumns)
	destinationDetailInsertCacheMut       sync.RWMutex
	destinationDetailInsertCache          = make(map[string]insertCache)
	destinationDetailUpdateCacheMut       sync.RWMutex
	destinationDetailUpdateCache          = make(map[string]updateCache)
	destinationDetailUpsertCacheMut       sync.RWMutex
	destinationDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var destinationDetailBeforeInsertHooks []DestinationDetailHook
var destinationDetailBeforeUpdateHooks []DestinationDetailHook
var destinationDetailBeforeDeleteHooks []DestinationDetailHook
var destinationDetailBeforeUpsertHooks []DestinationDetailHook

var destinationDetailAfterInsertHooks []DestinationDetailHook
var destinationDetailAfterSelectHooks []DestinationDetailHook
var destinationDetailAfterUpdateHooks []DestinationDetailHook
var destinationDetailAfterDeleteHooks []DestinationDetailHook
var destinationDetailAfterUpsertHooks []DestinationDetailHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DestinationDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DestinationDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DestinationDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DestinationDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DestinationDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DestinationDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DestinationDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DestinationDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DestinationDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range destinationDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDestinationDetailHook registers your hook function for all future operations.
func AddDestinationDetailHook(hookPoint boil.HookPoint, destinationDetailHook DestinationDetailHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		destinationDetailBeforeInsertHooks = append(destinationDetailBeforeInsertHooks, destinationDetailHook)
	case boil.BeforeUpdateHook:
		destinationDetailBeforeUpdateHooks = append(destinationDetailBeforeUpdateHooks, destinationDetailHook)
	case boil.BeforeDeleteHook:
		destinationDetailBeforeDeleteHooks = append(destinationDetailBeforeDeleteHooks, destinationDetailHook)
	case boil.BeforeUpsertHook:
		destinationDetailBeforeUpsertHooks = append(destinationDetailBeforeUpsertHooks, destinationDetailHook)
	case boil.AfterInsertHook:
		destinationDetailAfterInsertHooks = append(destinationDetailAfterInsertHooks, destinationDetailHook)
	case boil.AfterSelectHook:
		destinationDetailAfterSelectHooks = append(destinationDetailAfterSelectHooks, destinationDetailHook)
	case boil.AfterUpdateHook:
		destinationDetailAfterUpdateHooks = append(destinationDetailAfterUpdateHooks, destinationDetailHook)
	case boil.AfterDeleteHook:
		destinationDetailAfterDeleteHooks = append(destinationDetailAfterDeleteHooks, destinationDetailHook)
	case boil.AfterUpsertHook:
		destinationDetailAfterUpsertHooks = append(destinationDetailAfterUpsertHooks, destinationDetailHook)
	}
}

// One returns a single destinationDetail record from the query.
func (q destinationDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DestinationDetail, error) {
	o := &DestinationDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for destination_detail")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DestinationDetail records from the query.
func (q destinationDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (DestinationDetailSlice, error) {
	var o []*DestinationDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DestinationDetail slice")
	}

	if len(destinationDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DestinationDetail records in the query.
func (q destinationDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count destination_detail rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q destinationDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if destination_detail exists")
	}

	return count > 0, nil
}

// Destination pointed to by the foreign key.
func (o *DestinationDetail) Destination(mods ...qm.QueryMod) destinationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DestinationID),
	}

	queryMods = append(queryMods, mods...)

	query := Destinations(queryMods...)
	queries.SetFrom(query.Query, "\"destination\"")

	return query
}

// LoadDestination allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (destinationDetailL) LoadDestination(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDestinationDetail interface{}, mods queries.Applicator) error {
	var slice []*DestinationDetail
	var object *DestinationDetail

	if singular {
		object = maybeDestinationDetail.(*DestinationDetail)
	} else {
		slice = *maybeDestinationDetail.(*[]*DestinationDetail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &destinationDetailR{}
		}
		if !queries.IsNil(object.DestinationID) {
			args = append(args, object.DestinationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &destinationDetailR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DestinationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DestinationID) {
				args = append(args, obj.DestinationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`destination`),
		qm.WhereIn(`destination.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Destination")
	}

	var resultSlice []*Destination
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Destination")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for destination")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for destination")
	}

	if len(destinationDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Destination = foreign
		if foreign.R == nil {
			foreign.R = &destinationR{}
		}
		foreign.R.DestinationDetails = append(foreign.R.DestinationDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DestinationID, foreign.ID) {
				local.R.Destination = foreign
				if foreign.R == nil {
					foreign.R = &destinationR{}
				}
				foreign.R.DestinationDetails = append(foreign.R.DestinationDetails, local)
				break
			}
		}
	}

	return nil
}

// SetDestination of the destinationDetail to the related item.
// Sets o.R.Destination to related.
// Adds o to related.R.DestinationDetails.
func (o *DestinationDetail) SetDestination(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Destination) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"destination_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"destination_id"}),
		strmangle.WhereClause("\"", "\"", 2, destinationDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DestinationID, related.ID)
	if o.R == nil {
		o.R = &destinationDetailR{
			Destination: related,
		}
	} else {
		o.R.Destination = related
	}

	if related.R == nil {
		related.R = &destinationR{
			DestinationDetails: DestinationDetailSlice{o},
		}
	} else {
		related.R.DestinationDetails = append(related.R.DestinationDetails, o)
	}

	return nil
}

// RemoveDestination relationship.
// Sets o.R.Destination to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DestinationDetail) RemoveDestination(ctx context.Context, exec boil.ContextExecutor, related *Destination) error {
	var err error

	queries.SetScanner(&o.DestinationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("destination_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Destination = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DestinationDetails {
		if queries.Equal(o.DestinationID, ri.DestinationID) {
			continue
		}

		ln := len(related.R.DestinationDetails)
		if ln > 1 && i < ln-1 {
			related.R.DestinationDetails[i] = related.R.DestinationDetails[ln-1]
		}
		related.R.DestinationDetails = related.R.DestinationDetails[:ln-1]
		break
	}
	return nil
}

// DestinationDetails retrieves all the records using an executor.
func DestinationDetails(mods ...qm.QueryMod) destinationDetailQuery {
	mods = append(mods, qm.From("\"destination_detail\""))
	return destinationDetailQuery{NewQuery(mods...)}
}

// FindDestinationDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDestinationDetail(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DestinationDetail, error) {
	destinationDetailObj := &DestinationDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"destination_detail\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, destinationDetailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from destination_detail")
	}

	if err = destinationDetailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return destinationDetailObj, err
	}

	return destinationDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DestinationDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no destination_detail provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(destinationDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	destinationDetailInsertCacheMut.RLock()
	cache, cached := destinationDetailInsertCache[key]
	destinationDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			destinationDetailAllColumns,
			destinationDetailColumnsWithDefault,
			destinationDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(destinationDetailType, destinationDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(destinationDetailType, destinationDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"destination_detail\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"destination_detail\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into destination_detail")
	}

	if !cached {
		destinationDetailInsertCacheMut.Lock()
		destinationDetailInsertCache[key] = cache
		destinationDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DestinationDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DestinationDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	destinationDetailUpdateCacheMut.RLock()
	cache, cached := destinationDetailUpdateCache[key]
	destinationDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			destinationDetailAllColumns,
			destinationDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update destination_detail, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"destination_detail\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, destinationDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(destinationDetailType, destinationDetailMapping, append(wl, destinationDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update destination_detail row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for destination_detail")
	}

	if !cached {
		destinationDetailUpdateCacheMut.Lock()
		destinationDetailUpdateCache[key] = cache
		destinationDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q destinationDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for destination_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for destination_detail")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DestinationDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), destinationDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"destination_detail\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, destinationDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in destinationDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all destinationDetail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DestinationDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no destination_detail provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(destinationDetailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	destinationDetailUpsertCacheMut.RLock()
	cache, cached := destinationDetailUpsertCache[key]
	destinationDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			destinationDetailAllColumns,
			destinationDetailColumnsWithDefault,
			destinationDetailColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			destinationDetailAllColumns,
			destinationDetailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert destination_detail, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(destinationDetailPrimaryKeyColumns))
			copy(conflict, destinationDetailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"destination_detail\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(destinationDetailType, destinationDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(destinationDetailType, destinationDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert destination_detail")
	}

	if !cached {
		destinationDetailUpsertCacheMut.Lock()
		destinationDetailUpsertCache[key] = cache
		destinationDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DestinationDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DestinationDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DestinationDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), destinationDetailPrimaryKeyMapping)
	sql := "DELETE FROM \"destination_detail\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from destination_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for destination_detail")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q destinationDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no destinationDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from destination_detail")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for destination_detail")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DestinationDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(destinationDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), destinationDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"destination_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, destinationDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from destinationDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for destination_detail")
	}

	if len(destinationDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DestinationDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDestinationDetail(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DestinationDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DestinationDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), destinationDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"destination_detail\".* FROM \"destination_detail\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, destinationDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DestinationDetailSlice")
	}

	*o = slice

	return nil
}

// DestinationDetailExists checks if the DestinationDetail row exists.
func DestinationDetailExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"destination_detail\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if destination_detail exists")
	}

	return exists, nil
}
