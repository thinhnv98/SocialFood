// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RestaurantRank is an object representing the database table.
type RestaurantRank struct {
	ID           int     `boil:"id" json:"id" toml:"id" yaml:"id"`
	RestaurantID int     `boil:"restaurant_id" json:"restaurant_id" toml:"restaurant_id" yaml:"restaurant_id"`
	Vote         float64 `boil:"vote" json:"vote" toml:"vote" yaml:"vote"`
	TotalOfVote  int     `boil:"total_of_vote" json:"total_of_vote" toml:"total_of_vote" yaml:"total_of_vote"`

	R *restaurantRankR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L restaurantRankL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RestaurantRankColumns = struct {
	ID           string
	RestaurantID string
	Vote         string
	TotalOfVote  string
}{
	ID:           "id",
	RestaurantID: "restaurant_id",
	Vote:         "vote",
	TotalOfVote:  "total_of_vote",
}

var RestaurantRankTableColumns = struct {
	ID           string
	RestaurantID string
	Vote         string
	TotalOfVote  string
}{
	ID:           "restaurant_rank.id",
	RestaurantID: "restaurant_rank.restaurant_id",
	Vote:         "restaurant_rank.vote",
	TotalOfVote:  "restaurant_rank.total_of_vote",
}

// Generated where

var RestaurantRankWhere = struct {
	ID           whereHelperint
	RestaurantID whereHelperint
	Vote         whereHelperfloat64
	TotalOfVote  whereHelperint
}{
	ID:           whereHelperint{field: "\"restaurant_rank\".\"id\""},
	RestaurantID: whereHelperint{field: "\"restaurant_rank\".\"restaurant_id\""},
	Vote:         whereHelperfloat64{field: "\"restaurant_rank\".\"vote\""},
	TotalOfVote:  whereHelperint{field: "\"restaurant_rank\".\"total_of_vote\""},
}

// RestaurantRankRels is where relationship names are stored.
var RestaurantRankRels = struct {
	Restaurant string
}{
	Restaurant: "Restaurant",
}

// restaurantRankR is where relationships are stored.
type restaurantRankR struct {
	Restaurant *Restaurant `boil:"Restaurant" json:"Restaurant" toml:"Restaurant" yaml:"Restaurant"`
}

// NewStruct creates a new relationship struct
func (*restaurantRankR) NewStruct() *restaurantRankR {
	return &restaurantRankR{}
}

// restaurantRankL is where Load methods for each relationship are stored.
type restaurantRankL struct{}

var (
	restaurantRankAllColumns            = []string{"id", "restaurant_id", "vote", "total_of_vote"}
	restaurantRankColumnsWithoutDefault = []string{}
	restaurantRankColumnsWithDefault    = []string{"id", "restaurant_id", "vote", "total_of_vote"}
	restaurantRankPrimaryKeyColumns     = []string{"id"}
)

type (
	// RestaurantRankSlice is an alias for a slice of pointers to RestaurantRank.
	// This should almost always be used instead of []RestaurantRank.
	RestaurantRankSlice []*RestaurantRank
	// RestaurantRankHook is the signature for custom RestaurantRank hook methods
	RestaurantRankHook func(context.Context, boil.ContextExecutor, *RestaurantRank) error

	restaurantRankQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	restaurantRankType                 = reflect.TypeOf(&RestaurantRank{})
	restaurantRankMapping              = queries.MakeStructMapping(restaurantRankType)
	restaurantRankPrimaryKeyMapping, _ = queries.BindMapping(restaurantRankType, restaurantRankMapping, restaurantRankPrimaryKeyColumns)
	restaurantRankInsertCacheMut       sync.RWMutex
	restaurantRankInsertCache          = make(map[string]insertCache)
	restaurantRankUpdateCacheMut       sync.RWMutex
	restaurantRankUpdateCache          = make(map[string]updateCache)
	restaurantRankUpsertCacheMut       sync.RWMutex
	restaurantRankUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var restaurantRankBeforeInsertHooks []RestaurantRankHook
var restaurantRankBeforeUpdateHooks []RestaurantRankHook
var restaurantRankBeforeDeleteHooks []RestaurantRankHook
var restaurantRankBeforeUpsertHooks []RestaurantRankHook

var restaurantRankAfterInsertHooks []RestaurantRankHook
var restaurantRankAfterSelectHooks []RestaurantRankHook
var restaurantRankAfterUpdateHooks []RestaurantRankHook
var restaurantRankAfterDeleteHooks []RestaurantRankHook
var restaurantRankAfterUpsertHooks []RestaurantRankHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RestaurantRank) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantRankBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RestaurantRank) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantRankBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RestaurantRank) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantRankBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RestaurantRank) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantRankBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RestaurantRank) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantRankAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RestaurantRank) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantRankAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RestaurantRank) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantRankAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RestaurantRank) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantRankAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RestaurantRank) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range restaurantRankAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRestaurantRankHook registers your hook function for all future operations.
func AddRestaurantRankHook(hookPoint boil.HookPoint, restaurantRankHook RestaurantRankHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		restaurantRankBeforeInsertHooks = append(restaurantRankBeforeInsertHooks, restaurantRankHook)
	case boil.BeforeUpdateHook:
		restaurantRankBeforeUpdateHooks = append(restaurantRankBeforeUpdateHooks, restaurantRankHook)
	case boil.BeforeDeleteHook:
		restaurantRankBeforeDeleteHooks = append(restaurantRankBeforeDeleteHooks, restaurantRankHook)
	case boil.BeforeUpsertHook:
		restaurantRankBeforeUpsertHooks = append(restaurantRankBeforeUpsertHooks, restaurantRankHook)
	case boil.AfterInsertHook:
		restaurantRankAfterInsertHooks = append(restaurantRankAfterInsertHooks, restaurantRankHook)
	case boil.AfterSelectHook:
		restaurantRankAfterSelectHooks = append(restaurantRankAfterSelectHooks, restaurantRankHook)
	case boil.AfterUpdateHook:
		restaurantRankAfterUpdateHooks = append(restaurantRankAfterUpdateHooks, restaurantRankHook)
	case boil.AfterDeleteHook:
		restaurantRankAfterDeleteHooks = append(restaurantRankAfterDeleteHooks, restaurantRankHook)
	case boil.AfterUpsertHook:
		restaurantRankAfterUpsertHooks = append(restaurantRankAfterUpsertHooks, restaurantRankHook)
	}
}

// One returns a single restaurantRank record from the query.
func (q restaurantRankQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RestaurantRank, error) {
	o := &RestaurantRank{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for restaurant_rank")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RestaurantRank records from the query.
func (q restaurantRankQuery) All(ctx context.Context, exec boil.ContextExecutor) (RestaurantRankSlice, error) {
	var o []*RestaurantRank

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RestaurantRank slice")
	}

	if len(restaurantRankAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RestaurantRank records in the query.
func (q restaurantRankQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count restaurant_rank rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q restaurantRankQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if restaurant_rank exists")
	}

	return count > 0, nil
}

// Restaurant pointed to by the foreign key.
func (o *RestaurantRank) Restaurant(mods ...qm.QueryMod) restaurantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RestaurantID),
	}

	queryMods = append(queryMods, mods...)

	query := Restaurants(queryMods...)
	queries.SetFrom(query.Query, "\"restaurant\"")

	return query
}

// LoadRestaurant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (restaurantRankL) LoadRestaurant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRestaurantRank interface{}, mods queries.Applicator) error {
	var slice []*RestaurantRank
	var object *RestaurantRank

	if singular {
		object = maybeRestaurantRank.(*RestaurantRank)
	} else {
		slice = *maybeRestaurantRank.(*[]*RestaurantRank)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &restaurantRankR{}
		}
		args = append(args, object.RestaurantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &restaurantRankR{}
			}

			for _, a := range args {
				if a == obj.RestaurantID {
					continue Outer
				}
			}

			args = append(args, obj.RestaurantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`restaurant`),
		qm.WhereIn(`restaurant.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Restaurant")
	}

	var resultSlice []*Restaurant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Restaurant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for restaurant")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for restaurant")
	}

	if len(restaurantRankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Restaurant = foreign
		if foreign.R == nil {
			foreign.R = &restaurantR{}
		}
		foreign.R.RestaurantRanks = append(foreign.R.RestaurantRanks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RestaurantID == foreign.ID {
				local.R.Restaurant = foreign
				if foreign.R == nil {
					foreign.R = &restaurantR{}
				}
				foreign.R.RestaurantRanks = append(foreign.R.RestaurantRanks, local)
				break
			}
		}
	}

	return nil
}

// SetRestaurant of the restaurantRank to the related item.
// Sets o.R.Restaurant to related.
// Adds o to related.R.RestaurantRanks.
func (o *RestaurantRank) SetRestaurant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Restaurant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"restaurant_rank\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"restaurant_id"}),
		strmangle.WhereClause("\"", "\"", 2, restaurantRankPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RestaurantID = related.ID
	if o.R == nil {
		o.R = &restaurantRankR{
			Restaurant: related,
		}
	} else {
		o.R.Restaurant = related
	}

	if related.R == nil {
		related.R = &restaurantR{
			RestaurantRanks: RestaurantRankSlice{o},
		}
	} else {
		related.R.RestaurantRanks = append(related.R.RestaurantRanks, o)
	}

	return nil
}

// RestaurantRanks retrieves all the records using an executor.
func RestaurantRanks(mods ...qm.QueryMod) restaurantRankQuery {
	mods = append(mods, qm.From("\"restaurant_rank\""))
	return restaurantRankQuery{NewQuery(mods...)}
}

// FindRestaurantRank retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRestaurantRank(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RestaurantRank, error) {
	restaurantRankObj := &RestaurantRank{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"restaurant_rank\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, restaurantRankObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from restaurant_rank")
	}

	if err = restaurantRankObj.doAfterSelectHooks(ctx, exec); err != nil {
		return restaurantRankObj, err
	}

	return restaurantRankObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RestaurantRank) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no restaurant_rank provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantRankColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	restaurantRankInsertCacheMut.RLock()
	cache, cached := restaurantRankInsertCache[key]
	restaurantRankInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			restaurantRankAllColumns,
			restaurantRankColumnsWithDefault,
			restaurantRankColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(restaurantRankType, restaurantRankMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(restaurantRankType, restaurantRankMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"restaurant_rank\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"restaurant_rank\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into restaurant_rank")
	}

	if !cached {
		restaurantRankInsertCacheMut.Lock()
		restaurantRankInsertCache[key] = cache
		restaurantRankInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RestaurantRank.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RestaurantRank) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	restaurantRankUpdateCacheMut.RLock()
	cache, cached := restaurantRankUpdateCache[key]
	restaurantRankUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			restaurantRankAllColumns,
			restaurantRankPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update restaurant_rank, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"restaurant_rank\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, restaurantRankPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(restaurantRankType, restaurantRankMapping, append(wl, restaurantRankPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update restaurant_rank row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for restaurant_rank")
	}

	if !cached {
		restaurantRankUpdateCacheMut.Lock()
		restaurantRankUpdateCache[key] = cache
		restaurantRankUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q restaurantRankQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for restaurant_rank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for restaurant_rank")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RestaurantRankSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantRankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"restaurant_rank\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, restaurantRankPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in restaurantRank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all restaurantRank")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RestaurantRank) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no restaurant_rank provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(restaurantRankColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	restaurantRankUpsertCacheMut.RLock()
	cache, cached := restaurantRankUpsertCache[key]
	restaurantRankUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			restaurantRankAllColumns,
			restaurantRankColumnsWithDefault,
			restaurantRankColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			restaurantRankAllColumns,
			restaurantRankPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert restaurant_rank, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(restaurantRankPrimaryKeyColumns))
			copy(conflict, restaurantRankPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"restaurant_rank\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(restaurantRankType, restaurantRankMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(restaurantRankType, restaurantRankMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert restaurant_rank")
	}

	if !cached {
		restaurantRankUpsertCacheMut.Lock()
		restaurantRankUpsertCache[key] = cache
		restaurantRankUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RestaurantRank record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RestaurantRank) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RestaurantRank provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), restaurantRankPrimaryKeyMapping)
	sql := "DELETE FROM \"restaurant_rank\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from restaurant_rank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for restaurant_rank")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q restaurantRankQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no restaurantRankQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from restaurant_rank")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for restaurant_rank")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RestaurantRankSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(restaurantRankBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantRankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"restaurant_rank\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restaurantRankPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from restaurantRank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for restaurant_rank")
	}

	if len(restaurantRankAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RestaurantRank) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRestaurantRank(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RestaurantRankSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RestaurantRankSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), restaurantRankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"restaurant_rank\".* FROM \"restaurant_rank\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, restaurantRankPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RestaurantRankSlice")
	}

	*o = slice

	return nil
}

// RestaurantRankExists checks if the RestaurantRank row exists.
func RestaurantRankExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"restaurant_rank\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if restaurant_rank exists")
	}

	return exists, nil
}
